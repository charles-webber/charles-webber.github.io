<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机网络学习记录</title>
      <link href="/2023/09/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="第一节：概述"><a href="#第一节：概述" class="headerlink" title="第一节：概述"></a><strong>第一节：概述</strong></h1><h2 id="1-1-计算机网络在信息时代的作用"><a href="#1-1-计算机网络在信息时代的作用" class="headerlink" title="1.1 计算机网络在信息时代的作用"></a>1.1 计算机网络在信息时代的作用</h2><h3 id="1-1-1-定义"><a href="#1-1-1-定义" class="headerlink" title="1.1.1 定义"></a>1.1.1 定义</h3><p>Internet是全球最大的，最重要的计算机网络，是计算机网络的一部分</p><h3 id="1-1-2特点"><a href="#1-1-2特点" class="headerlink" title="1.1.2特点"></a>1.1.2特点</h3><p>1.连通性（connectivity）2.资源共享（sharing）</p><p><img src="https://gitee.com/Charles-Webber/blog-image1/raw/master/img/image-20230716125923545.png" alt="image-20230716125923545"></p><h2 id="1-2-互联网概述"><a href="#1-2-互联网概述" class="headerlink" title="1.2 互联网概述"></a>1.2 互联网概述</h2><h3 id="1-2-1-网络的网络"><a href="#1-2-1-网络的网络" class="headerlink" title="1.2.1 网络的网络"></a>1.2.1 网络的网络</h3><p>网络&#x3D;节点（node）+链路（link）</p><p>链路有点抽象</p><p><img src="/.io//image-20230716131517681.png" alt="image-20230716131517681"></p><p>多个网络——》路由器连接——》更大的网络——》网络的网络——》互连网</p><p>更多的互连网覆盖全球连接成互联网</p><p><img src="/.io//image-20230716131956839.png" alt="image-20230716131956839"></p><h3 id="1-2-2-互联网基础结构发展的三个阶段"><a href="#1-2-2-互联网基础结构发展的三个阶段" class="headerlink" title="1.2.2 互联网基础结构发展的三个阶段"></a>1.2.2 互联网基础结构发展的三个阶段</h3><p>第一阶段（1965–1990）：1983年作为互联网的诞生时间，TCP&#x2F;IP协议成为APPANET的标准协议</p><p>第二阶段（1985–1993）：三级结构：主干网，地区网，校园网或者企业网</p><p>第三阶段（1993–至今）： 多层isp结构：主干isp，地区isp，本地isp</p><p>isp就是卖卡的运营商:smile:&#x2F;&#x2F;</p><p>（isp ix：互联网交换点）</p><p><img src="/.io//image-20230716132040781.png" alt="image-20230716132040781"></p><p>cp就是b站这种</p><p><img src="/.io//image-20230716133419473.png" alt="image-20230716133419473"></p><p>*一些历史</p><p><img src="/.io//image-20230716133634489.png" alt="image-20230716133634489"></p><h3 id="1-2-3-互联网的标准化工作"><a href="#1-2-3-互联网的标准化工作" class="headerlink" title="1.2.3 互联网的标准化工作"></a>1.2.3 互联网的标准化工作</h3><p>管理金字塔：<img src="/.io//image-20230716133852203.png" alt="image-20230716133852203"></p><p>发表格式：<img src="/.io//image-20230716133959590.png" alt="image-20230716133959590"></p><p>标准化过程：<img src="/.io//image-20230716134141548.png" alt="image-20230716134141548"></p><h2 id="1-3-互联网的组成"><a href="#1-3-互联网的组成" class="headerlink" title="1.3 互联网的组成"></a>1.3 互联网的组成</h2><h3 id="1-3-1互联网的边缘部分"><a href="#1-3-1互联网的边缘部分" class="headerlink" title="1.3.1互联网的边缘部分"></a>1.3.1互联网的边缘部分</h3><p>工作方式分：</p><p><img src="/.io//image-20230716180923056.png" alt="image-20230716180923056"></p><p>核心（服务</p><p>边缘:终端系统，例如你的手机，电脑，是网络的尽头,不负责转发</p><h4 id="计算机之间的通信："><a href="#计算机之间的通信：" class="headerlink" title="计算机之间的通信："></a>计算机之间的通信：</h4><p>主机a的某个进程与主机b的某个进程进行通信</p><h4 id="通信方式："><a href="#通信方式：" class="headerlink" title="通信方式："></a>通信方式：</h4><p>1.客户-服务器方式（c&#x2F;s方式）</p><p><img src="/.io//image-20230716182252086.png" alt="image-20230716182252086"></p><p>客户主动，服务被动，通信是双向的</p><p>特点：<img src="/.io//image-20230716182549951.png" alt="image-20230716182549951"></p><p>2.对等连接方式（p2p方式–cs升级版）</p><p><img src="/.io//image-20230716193447000.png" alt="image-20230716193447000"></p><p>既能请求又能提供服务，平等对等通信</p><h3 id="1-3-2-互联网的核心部分"><a href="#1-3-2-互联网的核心部分" class="headerlink" title="1.3.2*互联网的核心部分"></a>1.3.2*互联网的核心部分</h3><ul><li><p>复杂部分</p></li><li><p>连接边缘的主机</p><p>路由器（router）–&gt;实现分组交换的关键构件</p></li></ul><h4 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h4><h5 id="三个阶段："><a href="#三个阶段：" class="headerlink" title="三个阶段："></a>三个阶段：</h5><ul><li>建立连接：占用通信资源</li><li>通话：一直占用通信资源</li><li>连接释放：归还通信资源</li></ul><p>！！！要一直占用才算电路交换</p><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ol><li>通信时延小。因为通信线路为通信双方用户专用，数据直达，因此通信时延非常小，当<strong>连续传输大量数据</strong>时，这一优点非常明显。</li><li><strong>有序传输</strong>。因为通信双方之间只有一条专用的通信线路，数据只在这一条线路上传输，因此不存在失序问题。</li></ol><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><p>1.<strong>建立连接时间长</strong>。电路交换的平均连接建立时间对计算机通信来说太长。</p><p>2.线路独占，使用<strong>效率低</strong>。电路交换一旦建立连接，物理通路就被通信双方独占，即使通信线路空闲，也不能够供其他用户使用，因而信道利用率很低。</p><p>3.<strong>灵活性差</strong>。只要连接所建立的物理通路中的任何一点出现了故障，就必须重新拨号建立新的连接，这对十分紧急和重要的通信是很不利的。</p><p>4.难以规格化。电路交换时，数据直达，不同类型、不同规格、不同速率的终端很难相互进行通信，也难以在通信中进行差错控制。</p><h4 id="分组交换："><a href="#分组交换：" class="headerlink" title="分组交换："></a>分组交换：</h4><h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><ul><li>采用储存转发技术</li></ul><p><img src="/.io//image-20230716200204320.png" alt="image-20230716200204320"></p><h5 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h5><p><img src="/.io//image-20230716201153174.png" alt="image-20230716201153174"></p><ul><li>数据段前面添加首部就构成了分组（packet）</li></ul><p><img src="/.io//image-20230716200136812.png" alt="image-20230716200136812"></p><p>这个部分的不同称呼）））</p><p>物理层数据包: 比特流 (bit stream)<br>链路层数据包:帧 (frame)<br>网络层数据包: IP 数据报或分组 (packet)<br>运输层数据包: TCP 报文段 (segment) 或<br>UDP 用户数据报 (datagram)<br>应用层数据包: 报文 (message)</p><p>*首部由不同的协议决定</p><ul><li><p>接收到后去掉首部并且还原</p></li><li><p>每个分组独立选择传输路径</p></li></ul><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p><img src="/.io//image-20230716201920058.png" alt="image-20230716201920058"></p><p>高效、灵活、迅速、可靠</p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p><img src="/.io//image-20230716202046591.png" alt="image-20230716202046591"></p><p>排队、带宽不确定、开销大</p><p>10个字节利用率为百分之90</p><h4 id="报文交换："><a href="#报文交换：" class="headerlink" title="报文交换："></a>报文交换：</h4><h5 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h5><ol><li><strong>无需建立连接</strong>。报文交换不需要为通信双方预先建立一条专用的通信线路，不存在建立连接的时延，用户可以随时发送报文。</li><li><strong>动态分配线路</strong>。当发送方把报文传送给节点交换机时，节点交换机先存储整个报文，然后选择一条合适的空闲线路，将报文发送出去。</li><li><strong>可靠性。</strong>如果某条传输路径发送故障，会重新选择另一条路径传输数据，因此提高了传输的可靠性。</li><li><strong>提高线路利用率</strong>。通信双方不是固定占用一条通信线路，而是在不同的时间分段部分占用物理线路，因而大大提高了通信线路的利用率。</li></ol><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><ol><li>引起了转发<strong>时延</strong>。这是因为报文在节点交换机上要<em>经历存储转发的过程</em>。</li><li>需要较大的存储缓存空间。这是因为报文交换<strong>对报文的大小没有限制</strong>。</li><li>需要传输额外的信息量。这是因为报文<strong>需要携带目的地址、源地址等信息。</strong></li></ol><p><img src="/.io//image-20230716202236271.png" alt="image-20230716202236271"></p><p>直观体现分组交换的便利快捷</p><p><img src="/.io//image-20230716202442974.png" alt="image-20230716202442974"></p><h2 id="1-4计算机在我国的发展"><a href="#1-4计算机在我国的发展" class="headerlink" title="1.4计算机在我国的发展"></a>1.4计算机在我国的发展</h2><p>*一些历史</p><p><img src="/.io//image-20230717101308796.png" alt="image-20230717101308796"></p><p>cn规模最大的五个计算机网络</p><p><img src="/.io//image-20230717101458456.png" alt="image-20230717101458456"></p><h2 id="1-5-计算机网络的类别"><a href="#1-5-计算机网络的类别" class="headerlink" title="1.5 计算机网络的类别"></a>1.5 计算机网络的类别</h2><h3 id="1-5-1-计算机网络的定义"><a href="#1-5-1-计算机网络的定义" class="headerlink" title="1.5.1 计算机网络的定义"></a>1.5.1 计算机网络的定义</h3><p>未统一定义，有通俗定义（怎么连接？怎么管理？怎么共享？）</p><p><img src="/.io//image-20230717103507953.png" alt="image-20230717103507953"></p><h3 id="1-5-2-几种不同类别的计算机网络"><a href="#1-5-2-几种不同类别的计算机网络" class="headerlink" title="1.5.2 几种不同类别的计算机网络"></a>1.5.2 几种不同类别的计算机网络</h3><ul><li>按作用范围分</li></ul><p><img src="/.io//image-20230717103752857.png" alt="image-20230717103752857"></p><ul><li>按使用者分</li></ul><p>公用网（public）和专用网(private)</p><ul><li>接入网</li></ul><p><img src="/.io//image-20230717104426936.png" alt="image-20230717104426936"></p><h2 id="1-6-计算机网络的性能"><a href="#1-6-计算机网络的性能" class="headerlink" title="1.6*计算机网络的性能"></a>1.6*计算机网络的性能</h2><h3 id="1-6-1-计算机网络的性能指标"><a href="#1-6-1-计算机网络的性能指标" class="headerlink" title="1.6.1* 计算机网络的性能指标"></a>1.6.1* 计算机网络的性能指标</h3><h4 id="1-速率（香农）"><a href="#1-速率（香农）" class="headerlink" title="1.速率（香农）"></a>1.速率（香农）</h4><ul><li>比特是成为信息的基本单位</li><li>速率指的是数据的传送速率，称为数据率或者比特率</li><li>单位：bit&#x2F;s  kbit&#x2F;s  Mbit&#x2F;s  Gbit&#x2F;s（速率的换算为10的三次方，数据量的换算为2的10次方）</li><li>为理想状态额定功率</li></ul><h4 id="2-带宽（bandwidth）"><a href="#2-带宽（bandwidth）" class="headerlink" title="2.带宽（bandwidth）"></a>2.带宽（bandwidth）</h4><p>频域与时域（？）</p><p><img src="/.io//image-20230725171202338.png" alt="image-20230725171202338"></p><p>下载速度用字节表示，带宽用比特表示</p><p>指网络系统的通信<strong>链路</strong>（与信道或者传输媒体同意）传输数据的能力，即表征单位时间内从网络中的某一点到另一点所能通过的”<strong>最高数据率</strong>“。单位是bit&#x2F;s</p><h4 id="3-吞吐量（略）"><a href="#3-吞吐量（略）" class="headerlink" title="3.吞吐量（略）"></a>3.吞吐量（略）</h4><p><img src="/.io//image-20230725172027073.png" alt="image-20230725172027073"></p><p><img src="/.io//image-20230725172045324.png" alt="image-20230725172045324"></p><p>吞吐量降低会感觉到时延</p><h4 id="4-时延（delay）"><a href="#4-时延（delay）" class="headerlink" title="4.时延（delay）"></a>4.时延（delay）</h4><h5 id="1-发送时延（终端）"><a href="#1-发送时延（终端）" class="headerlink" title="1.发送时延（终端）"></a>1.发送时延（终端）</h5><p>*数据从电脑等发送到网络上，与数据量和带宽有关(带宽提高发送时延降低)</p><p><img src="/.io//image-20230725175506604.png" alt="image-20230725175506604"></p><p>公式：<br>$$<br>发送时延&#x3D;数据帧长度(bit)&#x2F;发送速率(bit&#x2F;s)<br>$$<br>发射时延与传输距离没有关系</p><h5 id="2-传播时延（线路）"><a href="#2-传播时延（线路）" class="headerlink" title="2.传播时延（线路）"></a>2.传播时延（线路）</h5><p><img src="/.io//image-20230725175843073.png" alt="image-20230725175843073"></p><p>传播时延与传播距离有关，与发送速率无关，因为一般来说速率是固定的</p><h5 id="3-处理时延和排队时延（路由器）"><a href="#3-处理时延和排队时延（路由器）" class="headerlink" title="3.处理时延和排队时延（路由器）"></a>3.处理时延和排队时延（路由器）</h5><p>*排队时延和处理时延是息息相关的</p><p>*当排队时延无限大时，数据会爆，这是很糟糕的情况</p><p>*处理时延是主机或路由器处理分组花的时间</p><p>*排队时延是排队等待处理的时间花费</p><h5 id="4-时延带宽积"><a href="#4-时延带宽积" class="headerlink" title="4.时延带宽积"></a>4.时延带宽积</h5><p><img src="/.io//image-20230725181859712.png" alt="image-20230725181859712"></p><p>带宽是线路的横截面积，时延是长度，单位是比特，表示数据栈排满能装多少数据 （发了，但对方还没接收到的数据量）</p><h5 id="总时延"><a href="#总时延" class="headerlink" title="总时延"></a>总时延</h5><p>总时延&#x3D;发送时延+传播时延+排队时延+处理时延</p><p><img src="/.io//image-20230725181042881.png" alt="image-20230725181042881"></p><h4 id="5-往返时间RTT（round-trip-time）"><a href="#5-往返时间RTT（round-trip-time）" class="headerlink" title="5.往返时间RTT（round-trip time）"></a>5.往返时间RTT（round-trip time）</h4><p>从发送完数据到确认接收完数据的时间</p><p>（传输时延+处理时延+返回时延）</p><p><img src="/.io//image-20230725195443604.png" alt="image-20230725195443604"></p><p>相关公式：<br>$$<br>有效数据率&#x3D;数据长度&#x2F;(发送时间+RTT)&#x3D;数据长度&#x2F;总时延<br>$$</p><h4 id="6-利用率"><a href="#6-利用率" class="headerlink" title="6.利用率"></a>6.利用率</h4><p><img src="/.io//image-20230725200730902.png" alt="image-20230725200730902"></p><p>利用率指的是有多少信道正在被利用</p><p>时延带宽积是指完全使用时有多少空位可以让数据等待</p><ul><li>利用率越大时延越大，不是越大越好，需要一定的容错（一般在30-50%，超过70%认为拥挤）</li></ul><h3 id="1-6-2计算机网络的非性能特征"><a href="#1-6-2计算机网络的非性能特征" class="headerlink" title="1.6.2计算机网络的非性能特征"></a>1.6.2计算机网络的非性能特征</h3><p><img src="/.io//image-20230725202926390.png" alt="image-20230725202926390"></p><h2 id="1-7-计算机的体系结构"><a href="#1-7-计算机的体系结构" class="headerlink" title="1.7*计算机的体系结构"></a>1.7*计算机的体系结构</h2><h4 id="1-7-1计算机网络体系结构的形成"><a href="#1-7-1计算机网络体系结构的形成" class="headerlink" title="1.7.1计算机网络体系结构的形成"></a>1.7.1计算机网络体系结构的形成</h4><p>*因为差别多需要统一的结构便于沟通</p><p>*将大问题通过分层变成若干个小问题</p><p>1983年ISO 7498标准</p><p><strong>OSI</strong></p><p><img src="/.io//image-20230725204046783.png" alt="image-20230725204046783"></p><h4 id="1-7-2协议与划分层次"><a href="#1-7-2协议与划分层次" class="headerlink" title="1.7.2协议与划分层次"></a>1.7.2协议与划分层次</h4><p><img src="/.io//image-20230725204220292.png" alt="image-20230725204220292"></p><p>工作分层，设定规则</p><h5 id="协议（语法、语义、同步-x2F-时序）"><a href="#协议（语法、语义、同步-x2F-时序）" class="headerlink" title="协议（语法、语义、同步&#x2F;时序）"></a>协议（语法、语义、同步&#x2F;时序）</h5><p><img src="/.io//image-20230725204325136.png" alt="image-20230725204325136"></p><p>协议分为文字描述和代码描述</p><h5 id="划分层次（理解不能）"><a href="#划分层次（理解不能）" class="headerlink" title="划分层次（理解不能）"></a>划分层次（理解不能）</h5><h6 id="分层要求"><a href="#分层要求" class="headerlink" title="分层要求"></a>分层要求</h6><ul><li>层次适度</li><li>功能确定</li><li>层次独立</li><li>层次关联</li><li>层次对等</li><li>层次协议</li><li>层次接口</li></ul><h6 id="层次功能"><a href="#层次功能" class="headerlink" title="层次功能"></a>层次功能</h6><ul><li>差错控制</li><li>流量控制</li><li>分段和重装</li><li>复用和分用</li><li>逻辑连接的建立和释放</li></ul><h4 id="1-7-3具有五层协议的体系结构"><a href="#1-7-3具有五层协议的体系结构" class="headerlink" title="1.7.3具有五层协议的体系结构"></a>1.7.3具有五层协议的体系结构</h4><p>osi<strong>不适合市场</strong>因此被淘汰了，取而代之的是由市场选择的<strong>事实上的国际标准</strong>（TCP&#x2F;IP），分为应用层、运输层、互联网层、网络接口层<img src="/.io//image-20230725210708216.png" alt="image-20230725210708216"></p><p>缺点</p><p><img src="/.io//image-20230725211115327.png" alt="image-20230725211115327"></p><p>实际教学为5层结构</p><p><img src="/.io//image-20230725211349577.png" alt="image-20230725211349577"></p><p>先大体过一下每个层次的功能</p><ul><li>应用层</li></ul><p>用户之间</p><p><img src="/.io//image-20230725211621386.png" alt="image-20230725211621386"></p><ul><li>运输层(TCP&#x2F;UDP)</li></ul><p>进程之间</p><p><img src="/.io//image-20230725211705488.png" alt="image-20230725211705488"></p><ul><li>网络层（IP）</li></ul><p>主机之间</p><p><img src="/.io//image-20230725211812661.png" alt="image-20230725211812661"></p><ul><li>数据链路层</li></ul><p>相邻节点之间</p><p><img src="/.io//image-20230725212835168.png" alt="image-20230725212835168"></p><ul><li><p>物理层</p><p>传比特<img src="/.io//image-20230725213023391.png" alt="image-20230725213023391"></p></li></ul><p>通信示例：<img src="/.io//image-20230725213651601.png" alt="image-20230725213651601"></p><p>（路由器也有应用层这些，但实际应用不使用）</p><h4 id="1-7-4实体、协议、服务和服务访问点"><a href="#1-7-4实体、协议、服务和服务访问点" class="headerlink" title="1.7.4实体、协议、服务和服务访问点"></a>1.7.4实体、协议、服务和服务访问点</h4><p><img src="/.io//image-20230725213905325.png" alt="image-20230725213905325"></p><p> *协议沟通同一层次的实体，对上层透明</p><p>*服务访问点用于相邻两层的实体进行交换信息，本质上是一个逻辑接口</p><p>*服务是垂直的</p><p>*上层以为他们直接靠协议进行通信，实际上是上层在使用下层的服务，下层对上层来说是透明的</p><h4 id="1-7-5-TCP-x2F-IP的体系结构（实际）"><a href="#1-7-5-TCP-x2F-IP的体系结构（实际）" class="headerlink" title="1.7.5 TCP&#x2F;IP的体系结构（实际）"></a>1.7.5 TCP&#x2F;IP的体系结构（实际）</h4><p><img src="/.io//image-20230725215853688.png" alt="image-20230725215853688"></p><p><img src="/.io//image-20230725215920283.png" alt="image-20230725215920283">核心部分越简单越好</p><h4 id="体系结构对比"><a href="#体系结构对比" class="headerlink" title="体系结构对比"></a>体系结构对比</h4><p><img src="/.io//image-20230802235901147.png" alt="image-20230802235901147"></p><h1 id="第二节：物理层"><a href="#第二节：物理层" class="headerlink" title="第二节：物理层"></a>第二节：物理层</h1><h2 id="2-1-物理层的基本概念"><a href="#2-1-物理层的基本概念" class="headerlink" title="2.1 物理层的基本概念"></a>2.1 物理层的基本概念</h2><ul><li>位置：网络体系结构的最底层（不是具体的传输媒体，也不是连接计算机的具体物理设备</li><li>功能：<img src="/.io//image-20230726202057797.png" alt="image-20230726202057797"></li></ul><p>接收，编码，传输</p><ul><li><p>作用：屏蔽掉不同传输媒体和通信手段的差异（将同一句话说给不同的人）</p></li><li><p>主要任务：确定与传输媒体的接口有关的一些特性</p></li><li><p>物理层协议是DTE和DCE间的约定，具有以下特性：</p></li></ul><ol><li>机械特性（长什么样）</li><li>电气特性（用多少电平，电阻之类）</li><li>功能特性（每根线的作用）</li><li>过程特性（各种事件的出现顺序）</li></ol><h2 id="2-2-数据通信的基础知识"><a href="#2-2-数据通信的基础知识" class="headerlink" title="2.2 数据通信的基础知识"></a>2.2 数据通信的基础知识</h2><h3 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语:"></a>基本术语:</h3><ol><li>通信：在源点和终点之间传递消息或者信息（消息不等于信息）</li><li>消息：能被通信双方理解而且可以相互传递的文字、符号、数据、语音和图像等</li><li>信息:消息中的有意义的部分，消息是信息的载体</li><li>数据：运送消息的实体，分为模拟数据和数字数据</li><li>信号：是消息的载体，通信系统中消息通过电信号传递，分为模拟信号和数字信号</li></ol><p>栗子:我发了一段乱码给小米，我们在通信，我发的是消息，但是小明看不懂，这段话对他没有意义，他也就没收到信息，乱码中有字母数字等为数据，在路线中通过电信号传递</p><p>画个示意图整理概念：</p><p><strong><img src="/.io//image-20230726213808371.png" alt="image-20230726213808371"></strong></p><h3 id="常见编码方式"><a href="#常见编码方式" class="headerlink" title="常见编码方式"></a>常见编码方式</h3><ul><li><p>不归零制（不确定·比特数）</p></li><li><p>归零制（跳变后归零）</p></li><li><p>曼切斯特编码（由上升沿或者下降沿作为0或1）</p></li><li><p>差分曼切斯特编码（由下一个比特状态确定，下一个是0边缘跳变，否则不变）</p><p><strong>特点</strong></p><p><img src="/.io//image-20230726230337759.png" alt="image-20230726230337759"></p></li></ul><h3 id="基本带通调制方法"><a href="#基本带通调制方法" class="headerlink" title="基本带通调制方法"></a>基本带通调制方法</h3><p><img src="/.io//image-20230726230632971.png" alt="image-20230726230632971"></p><p>调幅：不同信号用不同幅度的波形替代（高低电平幅度不同）</p><p>调频：高低电平频率不同</p><p>调相：高低电平相位不同</p><h3 id="码元"><a href="#码元" class="headerlink" title="码元"></a>码元</h3><p><img src="/.io//image-20230726231645991.png" alt="image-20230726231645991"></p><h3 id="2-2-1-数据通信系统的模型"><a href="#2-2-1-数据通信系统的模型" class="headerlink" title="2.2.1 数据通信系统的模型"></a>2.2.1 数据通信系统的模型</h3><p>  源系统(信源和发送器)</p><p>传输系统</p><p>目的系统(接收器和信宿)</p><p><img src="/.io//image-20230726211024317.png" alt="image-20230726211024317"></p><h3 id="2-2-2-有关信道的几个基本概念"><a href="#2-2-2-有关信道的几个基本概念" class="headerlink" title="2.2.2 有关信道的几个基本概念"></a>2.2.2 有关信道的几个基本概念</h3><ul><li>信道：信号传输的通道（单工、半双工、全双工通信）</li><li>基带信号（未调制，较多低频）</li><li>调制（基带调制和带通调制）</li></ul><p><img src="/.io//image-20230726211736738.png" alt="image-20230726211736738"></p><p>基带调制（编码coding）—改装自行车</p><p>带通调制—自行车放在大货车上、</p><h3 id="2-2-3-信道的极限容量"><a href="#2-2-3-信道的极限容量" class="headerlink" title="2.2.3 信道的极限容量"></a>2.2.3 信道的极限容量</h3><p>信道传输信号会失真</p><p><img src="/.io//image-20230726231845885.png" alt="image-20230726231845885"></p><p>失真原因：</p><p><img src="/.io//image-20230726232158449.png" alt="image-20230726232158449"></p><p><img src="/.io//image-20230726232222015.png" alt="image-20230726232222015"></p><p>信噪比：信号和噪声的比值</p><h4 id="信道的频率范围"><a href="#信道的频率范围" class="headerlink" title="信道的频率范围"></a>信道的频率范围</h4><h4 id="奈氏准则（理想情况）"><a href="#奈氏准则（理想情况）" class="headerlink" title="奈氏准则（理想情况）"></a>奈氏准则（理想情况）</h4><p><img src="/.io//image-20230726232653280.png" alt="image-20230726232653280"></p><p><img src="/.io//image-20230726235024390.png" alt="image-20230726235024390"> </p><h4 id="信噪比"><a href="#信噪比" class="headerlink" title="信噪比"></a>信噪比</h4><p><img src="/.io//image-20230726233449890.png" alt="image-20230726233449890"></p><p>s———signal</p><p>n———noise</p><h4 id="香农公式"><a href="#香农公式" class="headerlink" title="香农公式"></a>香农公式</h4><p><img src="/.io//image-20230726233652065.png" alt="image-20230726233652065">将信噪比考虑进去了，只要速率低于这个值就一定能找到传输方式减少差错</p><p><img src="/.io//image-20230726234017828.png" alt="image-20230726234017828"></p><p>奈氏是上限，香农是下限 </p><p>奈氏考虑码制，香农考虑信噪比</p><h2 id="2-3-物理层下面的传输媒体"><a href="#2-3-物理层下面的传输媒体" class="headerlink" title="2.3 物理层下面的传输媒体"></a>2.3 物理层下面的传输媒体</h2><h3 id="2-3-1-导引型传输媒体"><a href="#2-3-1-导引型传输媒体" class="headerlink" title="2.3.1 导引型传输媒体"></a>2.3.1 导引型传输媒体</h3><p><img src="/.io//image-20230727202119189.png" alt="image-20230727202119189"></p><p>*有线–网线等</p><h4 id="双绞线"><a href="#双绞线" class="headerlink" title="双绞线"></a>双绞线</h4><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><p>twist起来可以减少信号辐射</p><p>A&#x2F;D信号都可以传输</p><p>一般来说默认最高传输距离为100m</p><p>便宜</p><p><img src="/.io//image-20230727202737489.png" alt="image-20230727202737489"></p><h5 id="类别差别"><a href="#类别差别" class="headerlink" title="类别差别"></a>类别差别</h5><p><img src="/.io//image-20230727202810661.png" alt="image-20230727202810661"><strong>屏蔽更安全</strong></p><p><img src="/.io//image-20230727203032556.png" alt="image-20230727203032556"></p><p>F&#x2F;UTP最外层</p><p>U&#x2F;FTP里层</p><p>F&#x2F;FTP双层</p><h5 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h5><p><img src="/.io//image-20230727203754882.png" alt="image-20230727203754882"></p><p>8类线，负责传输电磁波信号</p><p><img src="/.io//image-20230727203910384.png" alt="image-20230727203910384"></p><h4 id="同轴电缆"><a href="#同轴电缆" class="headerlink" title="同轴电缆"></a>同轴电缆</h4><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><p>一层包一层</p><p>被双绞线和光纤薄纱</p><p>容易被偷</p><p><img src="/.io//image-20230727204822445.png" alt="image-20230727204822445"></p><h4 id="光缆"><a href="#光缆" class="headerlink" title="光缆"></a>光缆</h4><p><img src="/.io//image-20230727205119550.png" alt="image-20230727205119550"></p><h5 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h5><p>发送端要有光源，不能有电源（发光二极管，半导体激光器等）</p><p>接收端要有光检测器还原出电脉冲</p><h5 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h5><p>利用物理相关知识设计使得光以某个入射角入射时，光线一直在线路中进行全反射传播</p><p><img src="/.io//image-20230727205628057.png" alt="image-20230727205628057"></p><h5 id="多模与单模"><a href="#多模与单模" class="headerlink" title="多模与单模"></a>多模与单模</h5><p><img src="/.io//image-20230727205919922.png" alt="image-20230727205919922"></p><p>多模传的多但是距离短（损耗大）</p><p>单模传的少但是长</p><h5 id="使用类别"><a href="#使用类别" class="headerlink" title="使用类别"></a>使用类别</h5><p><img src="/.io//image-20230727210131465.png" alt="image-20230727210131465"></p><h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><p><img src="/.io//image-20230727210212003.png" alt="image-20230727210212003">太脆弱了需要很多保护层</p><h3 id="2-3-2-非导引型传输媒体"><a href="#2-3-2-非导引型传输媒体" class="headerlink" title="2.3.2 非导引型传输媒体"></a>2.3.2 非导引型传输媒体</h3><p><img src="/.io//image-20230727202135018.png" alt="image-20230727202135018"></p><p>*无线–wifi</p><h4 id="无线电微波通信"><a href="#无线电微波通信" class="headerlink" title="无线电微波通信"></a>无线电微波通信</h4><p><img src="/.io//image-20230727211708263.png" alt="image-20230727211708263"></p><p>通过微波接力扩大传输距离（地面和太空）</p><h4 id="同步卫星"><a href="#同步卫星" class="headerlink" title="同步卫星"></a>同步卫星</h4><p><img src="/.io//image-20230727212445803.png" alt="image-20230727212445803"></p><h4 id="近地卫星"><a href="#近地卫星" class="headerlink" title="近地卫星"></a>近地卫星</h4><p><img src="/.io//image-20230727212625219.png" alt="image-20230727212625219"></p><h3 id="2-4-信道复用技术"><a href="#2-4-信道复用技术" class="headerlink" title="2.4 信道复用技术"></a>2.4 信道复用技术</h3><h4 id="2-4-1-频分复用、时分复用和统计时分复用"><a href="#2-4-1-频分复用、时分复用和统计时分复用" class="headerlink" title="2.4.1 频分复用、时分复用和统计时分复用"></a>2.4.1 频分复用、时分复用和统计时分复用</h4><p>信道复用—–传输多个信号，提高信道利用率，降低成本</p><p><img src="/.io//image-20230727213639106.png" alt="image-20230727213639106"></p><h6 id="频分复用（电视同一时间有不同的频道可以观看）"><a href="#频分复用（电视同一时间有不同的频道可以观看）" class="headerlink" title="频分复用（电视同一时间有不同的频道可以观看）"></a>频分复用（电视同一时间有不同的频道可以观看）</h6><p><img src="/.io//image-20230727213835807.png" alt="image-20230727213835807"></p><p>分到哪个就只能用哪个</p><h6 id="频分多址（同一个频道轮流有不同的电视节目）"><a href="#频分多址（同一个频道轮流有不同的电视节目）" class="headerlink" title="频分多址（同一个频道轮流有不同的电视节目）"></a>频分多址（同一个频道轮流有不同的电视节目）</h6><p><img src="/.io//image-20230727214102303.png" alt="image-20230727214102303"></p><h6 id="时分复用"><a href="#时分复用" class="headerlink" title="时分复用"></a>时分复用</h6><p><img src="/.io//image-20230727214404250-1690465445714-1.png" alt="image-20230727214404250"></p><p>一天按一个小时为单位（TDM帧），前20分钟给a用，然后给b用，最后给c用，循环24次</p><p><strong>缺点</strong></p><p>前20分钟不管你用不用，后面的人都得等待，效率低—— </p><h6 id="时分多址"><a href="#时分多址" class="headerlink" title="时分多址"></a>时分多址</h6><p>前20分钟不单单给a用，也可以给a的好朋友efg用</p><p><img src="/.io//image-20230727214859241.png" alt="image-20230727214859241"></p><h5 id="统计时分复用"><a href="#统计时分复用" class="headerlink" title="统计时分复用"></a>统计时分复用</h5><p>前面说了时分复用会让利用率降低，那么统计时分就是在此基础上添加新补丁的版本</p><p> 将原本的TDM帧升级为STDM帧，通过复用器将每个部分进行扫描，有数据则存入STDM中，当帧满时再发送</p><p><img src="/.io//image-20230727224015005.png" alt="image-20230727224015005"></p><h4 id="2-4-2-（光）波分复用"><a href="#2-4-2-（光）波分复用" class="headerlink" title="2.4.2 （光）波分复用"></a>2.4.2 （光）波分复用</h4><p>其实就是光波的频分复用，只不过这里的频率指的是光波的波长</p><p><img src="/.io//image-20230727224336036.png" alt="image-20230727224336036"></p><p><img src="/.io//image-20230727224415679.png" alt="image-20230727224415679"></p><h4 id="2-4-3-码分复用（码分多址）"><a href="#2-4-3-码分复用（码分多址）" class="headerlink" title="2.4.3 码分复用（码分多址）"></a>2.4.3 码分复用（码分多址）</h4><p>前面的时分和波分复用都是固定了时间或者频率范围进行描述的，而码分复用就是要求时间及频率都相同的情况下如何进行码分复用，很简单，就是给不同的游客分发不同的牌证在同一辆车上跑，等下车时看牌分人</p><p><em><img src="/.io//image-20230727225132254.png" alt="image-20230727225132254"></em>*</p><h6 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h6><p><img src="/.io//image-20230727225745816.png" alt="image-20230727225745816"></p><p>将原来的0和1扩展内核变成一个m位的二进制数，例如1101代表1，那么它的反码0010就是表示0</p><p>为了便于计算，码片的0表示成-1，1就是1</p><p><strong>为了能复用传输的东西也扩大了m倍</strong></p><h6 id="如何区分不同码片？"><a href="#如何区分不同码片？" class="headerlink" title="如何区分不同码片？"></a>如何区分不同码片？</h6><p>类比数学上的向量内积</p><p><img src="/.io//image-20230727230407485.png" alt="image-20230727230407485"></p><p><img src="/.io//image-20230727230416910.png" alt="image-20230727230416910"></p><h6 id="怎么从合并信号中分离出单一信号？"><a href="#怎么从合并信号中分离出单一信号？" class="headerlink" title="怎么从合并信号中分离出单一信号？"></a>怎么从合并信号中分离出单一信号？</h6><p><img src="/.io//image-20230727231251326.png" alt="image-20230727231251326"></p><p>首先确定两个码片的波形，然后将两个信号叠加起来（算数），最后将信号分离时需要哪一个信号就将合并的信号与其码片进行内积计算，得到的波形就是我们需要的原信号（这里1代表1，0代表-1）</p><h4 id="各种复用技术的使用条件"><a href="#各种复用技术的使用条件" class="headerlink" title="各种复用技术的使用条件"></a>各种复用技术的使用条件</h4><p>频分复用适用于传输的信号在不同的频带上</p><p>时分复用适用于在不同的时间上传输的信号</p><p>波分复用适用于光信号传播</p><p>码分复用适用于干扰较强时</p><h1 id="第三节-数据链路层概述"><a href="#第三节-数据链路层概述" class="headerlink" title="第三节 数据链路层概述"></a>第三节 数据链路层概述</h1><h2 id="3-1-1-关于数据链路层"><a href="#3-1-1-关于数据链路层" class="headerlink" title="3.1.1 关于数据链路层"></a>3.1.1 关于数据链路层</h2><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><p>​1.在比特流中找到一组数据的开始以及结束位置</p><p>​2.解决多个设备接收比特流问题</p><p>​3.解决比特传输错误问题</p><h3 id="链路、数据链路、层、帧"><a href="#链路、数据链路、层、帧" class="headerlink" title="链路、数据链路、层、帧"></a>链路、数据链路、层、帧</h3><p><img src="/.io//image-20230801160555027.png" alt="image-20230801160555027"></p><p>链路：物理且无源</p><p>数据链路&#x3D;链路+协议</p><p>层：将结点与结点之间通过链路传输帧</p><p>帧：分组交换的单位到了链路层被叫做帧 </p><h3 id="协议栈看数据链路层"><a href="#协议栈看数据链路层" class="headerlink" title="协议栈看数据链路层"></a>协议栈看数据链路层</h3><p><img src="/.io//image-20230801160948245.png" alt="image-20230801160948245"></p><p>层对层，无视下层（透明），服务上层，看做直接传输帧通信</p><p><img src="/.io//image-20230801161140434.png" alt="image-20230801161140434"></p><h3 id="数据链路层的信道类型"><a href="#数据链路层的信道类型" class="headerlink" title="数据链路层的信道类型"></a>数据链路层的信道类型</h3><ol><li>点对点信道（骨干线路）</li></ol><ul><li><input disabled type="checkbox"> 使用协议？</li></ul><ol><li>广播通信（边缘线路）</li></ol><ul><li><input disabled type="checkbox"> 使用协议？</li></ul><h2 id="3-1-2-三个基本问题"><a href="#3-1-2-三个基本问题" class="headerlink" title="3.1.2 三个基本问题"></a>3.1.2 三个基本问题</h2><h3 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h3><p><strong>比特流前加首部和尾部进行帧定界</strong></p><p><em>数据链路层往上只加首部</em></p><p>MTU（Maximum Transfer Unit）—帧的数据部分最长限制&#x2F;IP数据报长度（图片蓝色部分）</p><p><img src="/.io//image-20230801162117153.png" alt="image-20230801162117153"></p><p>规定原因：（）</p><h4 id="成帧-FRAMING-方式"><a href="#成帧-FRAMING-方式" class="headerlink" title="成帧(FRAMING)方式"></a>成帧(FRAMING)方式</h4><ul><li>字节计数法（无差错情况）</li></ul><p>出错会导致一连串帧的错误</p><p><img src="/.io//image-20230801162707892.png" alt="image-20230801162707892"></p><ul><li>带字节填充的定界符法</li></ul><p>SOH（首部）与EOT（尾部）</p><p>数据部分若有与SOH或EOT相同的部分则会错误判断帧的边界</p><p><img src="/.io//image-20230801163037221.png" alt="image-20230801163037221">升级版：<strong>在有歧义的数据前面加上特殊字节或者字符</strong></p><p><img src="/.io//image-20230801163526670.png" alt="image-20230801163526670"></p><ul><li>带比特填充的定界符法</li><li><img src="/.io//image-20230801164114484.png" alt="image-20230801164114484"></li><li>物理层编码违例</li><li><img src="/.io//image-20230801164129689.png" alt="image-20230801164129689"></li></ul><h3 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h3><p>翻译：发送不发生差错</p><p>利用前面的插入方式使得传输正确</p><h3 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h3><h4 id="误码率（BER）"><a href="#误码率（BER）" class="headerlink" title="误码率（BER）"></a>误码率（BER）</h4><p>错误的比特占传输比特的总数</p><h4 id="纠错码（改）"><a href="#纠错码（改）" class="headerlink" title="纠错码（改）"></a>纠错码（改）</h4><p>使用于错误发生比较频繁的线路（无线链路）</p><h4 id="检错码（丢）"><a href="#检错码（丢）" class="headerlink" title="检错码（丢）"></a>检错码（丢）</h4><p>用在高可靠、误码率较低的信道上，例如光纤线路（光纤线路）</p><h4 id="循环冗余检验CRC原理"><a href="#循环冗余检验CRC原理" class="headerlink" title="循环冗余检验CRC原理"></a>循环冗余检验CRC<strong>原理</strong></h4><ol><li>在原来的数据部分（k位）加上n位的冗余码（FCS）构成帧</li><li>整体有错丢弃反之接收</li><li>计算方式：<img src="/.io//image-20230801165716585.png" alt="image-20230801165716585"></li><li>栗子：<img src="/.io//image-20230801171636250.png" alt="image-20230801171636250"></li></ol><p>​这种应该是通过代码程序实现<img src="/.io//image-20230801171652908.png" alt="image-20230801171652908"></p><p>国际标准<strong>P</strong></p><p><img src="/.io//image-20230801172010613.png" alt="image-20230801172010613"></p><p><em>FCS不一定由CRC得到</em></p><p>CRC只能做到接收到的帧没有错误，但是顺序问题不能判断</p><h2 id="3-2-点对点协议PPP"><a href="#3-2-点对点协议PPP" class="headerlink" title="3.2 点对点协议PPP"></a>3.2 点对点协议PPP</h2><h3 id="3-2-1-PPP协议的特点"><a href="#3-2-1-PPP协议的特点" class="headerlink" title="3.2.1 PPP协议的特点"></a>3.2.1 PPP协议的特点</h3><h4 id="工作要求"><a href="#工作要求" class="headerlink" title="工作要求"></a>工作要求</h4><p><img src="/.io//image-20230802112600769.png" alt="image-20230802112600769"></p><p><img src="/.io//image-20230802112720563.png" alt="image-20230802112720563"></p><p><strong>PPP不同于广播在于它会进行地址协商</strong></p><h4 id="协议组成"><a href="#协议组成" class="headerlink" title="协议组成"></a>协议组成</h4><p>LCP与NCP</p><p>LCP(Link Control Protocol)：链路控制协议—-用于建立、配置和测试数据链路的链路控制协议，双方可以<strong>协商一些选项</strong>，<strong>最重要****的功能之一是</strong>身份验证**</p><p>NCP（Network Control Protocol）:里面包括了不同的协议，用于不同网络层的数据传输</p><h3 id="3-2-2-PPP协议的帧格式"><a href="#3-2-2-PPP协议的帧格式" class="headerlink" title="3.2.2 PPP协议的帧格式"></a>3.2.2 PPP协议的帧格式</h3><h4 id="帧格式"><a href="#帧格式" class="headerlink" title="帧格式"></a>帧格式</h4><p><img src="/.io//image-20230802113938474.png" alt="image-20230802113938474"></p><h4 id="透明传输方式"><a href="#透明传输方式" class="headerlink" title="透明传输方式"></a>透明传输方式</h4><h5 id="异步传输—字节填充法"><a href="#异步传输—字节填充法" class="headerlink" title="异步传输—字节填充法"></a>异步传输—字节填充法</h5><p><img src="/.io//image-20230802114528795.png" alt="image-20230802114528795"></p><p>IP数据报里面与首位尾部一样的字节前面填充一个特殊字节，例如7D，然后IP数据报中原来就有的7D改为别的特殊字节例如5D</p><h5 id="同步传输—零比特传输法"><a href="#同步传输—零比特传输法" class="headerlink" title="同步传输—零比特传输法"></a>同步传输—零比特传输法</h5><p><img src="/.io//image-20230802114935943.png" alt="image-20230802114935943"></p><p>标志符是六个一，为了不让IP数据报中出现6个1，在传输数据时当出现连续的5个1时添加一个0（与后面数据无关），接收同理出现连续的五个1则删除接下来的那个比特</p><h4 id="同步异步区别"><a href="#同步异步区别" class="headerlink" title="同步异步区别"></a>同步异步区别</h4><p>*同步面向比特，单位帧，时钟统一，无间隔</p><p>*异步面向字节，单位字符，效率低，高速来南路开销大</p><h3 id="3-2-3-PPP协议的工作状态"><a href="#3-2-3-PPP协议的工作状态" class="headerlink" title="3.2.3 PPP协议的工作状态"></a>3.2.3 PPP协议的工作状态</h3><p><img src="/.io//image-20230802115318053.png" alt="image-20230802115318053"><br>（还是挺清晰的)</p><h2 id="3-3广播通信的数据链路层"><a href="#3-3广播通信的数据链路层" class="headerlink" title="3.3广播通信的数据链路层"></a>3.3广播通信的数据链路层</h2><h3 id="3-3-1-局域网的数据链路层"><a href="#3-3-1-局域网的数据链路层" class="headerlink" title="3.3.1 局域网的数据链路层"></a>3.3.1 局域网的数据链路层</h3><h4 id="优点：-2"><a href="#优点：-2" class="headerlink" title="优点："></a>优点：</h4><p>具有广播功能便于拓展</p><h4 id="局域网拓扑结构"><a href="#局域网拓扑结构" class="headerlink" title="局域网拓扑结构"></a>局域网拓扑结构</h4><p><img src="/.io//image-20230802220608850.png" alt="image-20230802220608850"></p><h5 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h5><p>总线：</p><p>（优点）结构简单布线容易、可靠性较高，易于扩充</p><p>（缺点）所有的数据都需经过总线传送，总线成为整个网络的瓶颈；出现故障诊断较为困难。另外，由于信道共享，连接的节点不宜过多，总线自身的故障可以导致系统的崩溃</p><p>星型：</p><p>优点：结构简单、容易实现、便于管理，通常以集线器（Hub）作为中央节点，便于网络维护和网络管理</p><p>缺点：中心结点是全网络的可靠瓶颈，中心结点出现故障会导致网络的瘫痪。</p><p>环形结构：</p><p>优点：结构简单，适合使用光纤，传输距离远，传输延迟确定。</p><p>缺点：环网中的每个结点均成为网络可靠性的瓶颈，任意结点出现故障都会造成网络瘫痪，另外故障诊断也较困难。最著名的环形结构网络是令牌环网（Token Ring）</p><p>树型结构：</p><p>优点：连结简单，维护方便，适用于汇集信息的应用要求。</p><p>缺点：资源共享能力较低，可靠性不高，任何一个工作站或链路的故障都会影响整个网络的运行</p><p>网状结构：</p><p>优点：系统可靠性高，比较容易扩展，但是结构复杂，每一结点都与多点进行连结，因此必须采用路由算法和流量控制方法。目前广域网基本上采用网状结构。</p><p>缺点： 1、拓扑结构复杂，其安装和配置都比较困难。 2、网络控制机制复杂，必须采用路由算法和流量控制机制</p><h4 id="媒体共享技术"><a href="#媒体共享技术" class="headerlink" title="媒体共享技术"></a>媒体共享技术</h4><p>静态划分通道：频分、时分、波分、码分</p><p>（通信量大且稳定，用户少且固定，代价高，不适合局域网）</p><p>动态媒体接入控制（多点接入）：随机接入（以太网）与受控接入（轮询polling）</p><p>*<strong>为解决数据发生冲突的情况，使用动态媒体接入控制</strong></p><h4 id="以太网的两个标准"><a href="#以太网的两个标准" class="headerlink" title="以太网的两个标准"></a>以太网的两个标准</h4><ol><li><p>IEEE 802.3（有LLC协议）</p></li><li><p>DIX Ethernet V2（商用，仅有MAC协议）</p></li></ol><h4 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h4><p>计算机通过适配器（网卡）来与互联网进行通信</p><p><img src="/.io//image-20230802234920407.png" alt="image-20230802234920407"></p><p>cpu找IP地址，网卡找硬件地址</p><p><strong>作用</strong></p><p><img src="/.io//image-20230802235303986.png" alt="image-20230802235303986"></p><h4 id="以太网的两个重要措施"><a href="#以太网的两个重要措施" class="headerlink" title="以太网的两个重要措施"></a>以太网的两个重要措施</h4><ol><li>采用较为灵活的<strong>无连接的工作方式</strong></li><li>发送使用曼切斯特编码，便于同步</li></ol><h3 id="3-3-2-CSMA-x2F-CD协议"><a href="#3-3-2-CSMA-x2F-CD协议" class="headerlink" title="3.3.2 CSMA&#x2F;CD协议"></a>3.3.2 CSMA&#x2F;CD协议</h3><h4 id="工作方式-1"><a href="#工作方式-1" class="headerlink" title="工作方式"></a>工作方式</h4><p>（先听后发，边听边发，冲突停止，延迟重发）</p><ul><li>多点接入–说明是总线型网络</li><li>载波监听–边发送边监听，发前和发中都要检测</li><li>碰撞检测–判断有没有发生碰撞：检测信道上电压的变化情况，电压摆动值超过一定值认为碰撞</li></ul><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul><li>适配器立即停止发送</li><li>等待随机时间后再次发送</li></ul><h4 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h4><p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.5c28ebc76c618c86e0c3309ea79e095a?rik=lhabvtwyNdbG5Q&riu=http://i2.51cto.com/images/blog/201811/20/c8c74f21e535437a119b5bd613c2d094.jpg?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=&ehk=1dMkSemuBsxi73wznIZq51G7JwXktOC7v1JDtg7mPZk=&risl=&pid=ImgRaw&r=0" alt="CSMA/CD原理及流程图-布布扣-bubuko.com"></p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p><img src="/.io//image-20230803002133229.png" alt="image-20230803002133229"></p><p>监听反应不过来，发生碰撞到终点的时间里不能判断，而此时还在发数据，数据会发生更大的错误</p><p><img src="/.io//image-20230803002420476.png" alt="image-20230803002420476"></p><p><img src="/.io//image-20230803002639512.png" alt="image-20230803002639512"></p><p>确实是:laughing:</p><h4 id="二进制指数退避"><a href="#二进制指数退避" class="headerlink" title="二进制指数退避"></a>二进制指数退避</h4><p><img src="/.io//image-20230803002804614.png" alt="image-20230803002804614"></p><p><img src="/.io//image-20230803002813046.png" alt="image-20230803002813046"></p><ul><li><p>二进制的名字来源于2的k次方-1那里</p></li><li><p>r&#x3D;2*k-1</p></li><li><p>T&#x3D;r*2t</p></li><li><p>k&#x3D;Min[重传次数，10]</p></li><li><p>重传16次丢弃并且高层报告</p></li></ul><p><img src="/.io//image-20230803003354398.png" alt="image-20230803003354398"></p><p>这个64字节有历史遗留:dancer:</p><p>  <em><strong>发生碰撞后线路上的其他用户可能不知道，这时发送站会人工发送信号到线路上通知所有用户发生碰撞</strong></em></p><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p><img src="/.io//image-20230803005808940.png" alt="image-20230803005808940"></p><h3 id="3-3-3-使用集线器的星型拓扑"><a href="#3-3-3-使用集线器的星型拓扑" class="headerlink" title="3.3.3 使用集线器的星型拓扑"></a>3.3.3 使用集线器的星型拓扑</h3><ul><li>传统传输媒体发展：粗同轴电缆–细同轴电缆–双绞线</li><li>双绞线对应星型拓扑，相对总线更好组网</li><li>可靠性依靠集线器（hub）</li></ul><p>*每个站到集线器的距离不超过100m</p><p><img src="/.io//image-20230804115517088.png" alt="image-20230804115517088"></p><p>F对应光纤</p><p><strong>特点</strong></p><p><img src="/.io//image-20230804115611779.png" alt="image-20230804115611779"></p><ul><li><p>逻辑上还是总线型</p></li><li><p>共享带宽</p></li><li><p>工作在物理层</p><p>​</p></li></ul><p></p><h3 id="3-3-4-以太网的信道利用率"><a href="#3-3-4-以太网的信道利用率" class="headerlink" title="3.3.4 以太网的信道利用率"></a>3.3.4 以太网的信道利用率</h3><ul><li>多个站可能会发生碰撞</li><li>碰撞后利用率低于100%</li></ul><p>计算公式：<br>$$<br>Smax&#x3D;T0&#x2F;T+t&#x3D;1&#x2F;(1+a)<br>a&#x3D;t&#x2F;T<br>其中t为争用期的一半，T为帧的发送时间<br>$$<br><img src="/.io//image-20230804120238964.png" alt="image-20230804120238964"></p><p>帧长路短就是好（S低于30%过载）</p><h3 id="3-3-5-以太网的MAC层"><a href="#3-3-5-以太网的MAC层" class="headerlink" title="3.3.5 以太网的MAC层"></a>3.3.5 以太网的MAC层</h3><p>*LLC层已经不用了</p><p><img src="/.io//image-20230804120639225.png" alt="image-20230804120639225"></p><p>就类似于你家的经纬度，固定了的</p><p>*一个接口一个网卡一个MAC地址</p><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a><strong>结构</strong></h4><p><img src="/.io//image-20230804121054951.png" alt="image-20230804121054951"></p><p>厂家就后三个字节自己定义不重复即可 </p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p><img src="/.io//image-20230804121255567.png" alt="image-20230804121255567"></p><p>发一个人，发一个组，发一个班</p><p><img src="/.io//image-20230804125654311.png" alt="image-20230804125654311"></p><p><img src="/.io//image-20230804125712343.png" alt="image-20230804125712343"></p><ul><li>适配器收到一个MAC帧会先用硬件检查帧中的MAC地址</li><li>是发送给自己的则接收并处理</li><li>不是发给自己的就丢弃</li><li>以<strong>混杂方式</strong>工作的有帧就收</li></ul><h4 id="MAC的帧格式"><a href="#MAC的帧格式" class="headerlink" title="MAC的帧格式"></a>MAC的帧格式</h4><p><img src="/.io//image-20230804130016505.png" alt="image-20230804130016505"></p><p><img src="/.io//image-20230804130025433.png" alt="image-20230804130025433"></p><p><img src="/.io//image-20230804130203716.png" alt="image-20230804130203716"></p><h4 id="无效MAC帧"><a href="#无效MAC帧" class="headerlink" title="无效MAC帧"></a>无效MAC帧</h4><p><img src="/.io//image-20230804130249583.png" alt="image-20230804130249583"></p><p>无效丢弃，不重传</p><h2 id="3-4-扩展的以太网"><a href="#3-4-扩展的以太网" class="headerlink" title="3.4 扩展的以太网"></a>3.4 扩展的以太网</h2><p>*扩展仍然是一个网络</p><h3 id="3-4-1-在物理层扩展以太网"><a href="#3-4-1-在物理层扩展以太网" class="headerlink" title="3.4.1 在物理层扩展以太网"></a>3.4.1 在物理层扩展以太网</h3><h4 id="使用光纤扩展（距离）"><a href="#使用光纤扩展（距离）" class="headerlink" title="使用光纤扩展（距离）"></a>使用光纤扩展（距离）</h4><p><img src="/.io//image-20230804130815062.png" alt="image-20230804130815062"></p><h4 id="使用集线器进行扩展（用户数量）"><a href="#使用集线器进行扩展（用户数量）" class="headerlink" title="使用集线器进行扩展（用户数量）"></a>使用集线器进行扩展（用户数量）</h4><p><img src="/.io//image-20230804130917492.png" alt="image-20230804130917492"></p><p>限制：双绞线最大距离，集线器接口数</p><p> 图示正好是一个冲突域，扩展越多冲突域越来越大</p><p><strong>优缺点</strong></p><p><img src="/.io//image-20230804131350009.png" alt="image-20230804131350009"></p><p><img src="/.io//image-20230804131358658.png" alt="image-20230804131358658"></p><h3 id="3-4-2-在数据链路层扩展以太网"><a href="#3-4-2-在数据链路层扩展以太网" class="headerlink" title="3.4.2 在数据链路层扩展以太网"></a>3.4.2 在数据链路层扩展以太网</h3><p>早期网桥，现在交换机（多接口网桥）</p><h5 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h5><ul><li><p>两个都是全双工工作方式，解决了共享总线的问题</p></li><li><p>减少了碰撞域（具有并行性 ）</p></li><li><p>接口有存储器</p></li><li><p>即插即用，交换表通过自学习建立</p></li><li><p>使用专用的交换结构芯片，比使用软件转发的网桥快的一</p></li><li><p>接口独享带宽，支持多类型多速率的接口</p></li></ul><h5 id="自学习"><a href="#自学习" class="headerlink" title="自学习"></a>自学习</h5><p><strong><img src="/.io//image-20230804132613963.png" alt="image-20230804132613963"></strong></p><h5 id="与集线器相连"><a href="#与集线器相连" class="headerlink" title="与集线器相连"></a>与集线器相连</h5><p><img src="/.io//image-20230804132928791.png" alt="image-20230804132928791"></p><p>更新困难，集线器没有交换表，默认广播</p><h5 id="两台交换机相连"><a href="#两台交换机相连" class="headerlink" title="两台交换机相连"></a>两台交换机相连</h5><p><img src="/.io//image-20230804133029794.png" alt="image-20230804133029794"></p><h5 id="多台交换机相连"><a href="#多台交换机相连" class="headerlink" title="多台交换机相连"></a>多台交换机相连</h5><p><img src="/.io//image-20230804133503240.png" alt="image-20230804133503240"></p><p>可能会形成回路，导致广播风暴</p><h5 id="生成树协议"><a href="#生成树协议" class="headerlink" title="生成树协议"></a>生成树协议</h5><p><img src="/.io//image-20230804133842252.png" alt="image-20230804133842252"></p><p>从逻辑上把两条线变成一条线（前两张图）</p><h5 id="从总线到星型以太网"><a href="#从总线到星型以太网" class="headerlink" title="从总线到星型以太网"></a>从总线到星型以太网</h5><p><img src="/.io//image-20230804134709381.png" alt="image-20230804134709381"></p><p>从CSMA&#x2F;CD协议到全双工</p><p><img src="/.io//image-20230804134751497.png" alt="image-20230804134751497"></p><h3 id="3-4-3-虚拟以太网"><a href="#3-4-3-虚拟以太网" class="headerlink" title="3.4.3 虚拟以太网"></a>3.4.3 虚拟以太网</h3><h5 id="以太网的问题"><a href="#以太网的问题" class="headerlink" title="以太网的问题"></a>以太网的问题</h5><p><img src="/.io//image-20230804134815560.png" alt="image-20230804134815560"></p><h5 id="广播域"><a href="#广播域" class="headerlink" title="广播域"></a>广播域</h5><p><img src="/.io//image-20230804135215265.png" alt="image-20230804135215265"></p><p><img src="/.io//image-20230804135227396.png" alt="image-20230804135227396"></p><p>冲突域：相互发信息会冲突的区域</p><p>广播域：发送消息大家都能收到的区域</p><h5 id="安全问题、管理问题"><a href="#安全问题、管理问题" class="headerlink" title="安全问题、管理问题"></a>安全问题、管理问题</h5><p>在一个广播域不想让某些用户接收到消息</p><h5 id="解决方法：虚拟局域网VLAN（Virtual-LAN）"><a href="#解决方法：虚拟局域网VLAN（Virtual-LAN）" class="headerlink" title="解决方法：虚拟局域网VLAN（Virtual LAN）"></a>解决方法：虚拟局域网VLAN（Virtual LAN）</h5><p><img src="/.io//image-20230804135545399.png" alt="image-20230804135545399"></p><p>只是局域网的一种服务，是一种协议，不是新型的局域网</p><p><img src="/.io//image-20230804135807660.png" alt="image-20230804135807660"></p><h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><p><img src="/.io//image-20230804140138213.png" alt="image-20230804140138213"></p><h5 id="划分标准"><a href="#划分标准" class="headerlink" title="划分标准"></a>划分标准</h5><p><img src="/.io//image-20230804140242934.png" alt="image-20230804140242934"></p><p>一般基于端口</p><h2 id="3-5-高速以太网（介绍）"><a href="#3-5-高速以太网（介绍）" class="headerlink" title="3.5 高速以太网（介绍）"></a>3.5 高速以太网（介绍）</h2><h3 id="3-5-1-100BASE-T-以太网"><a href="#3-5-1-100BASE-T-以太网" class="headerlink" title="3.5.1 100BASE-T 以太网"></a>3.5.1 100BASE-T 以太网</h3><p><img src="/.io//image-20230804140538329.png" alt="image-20230804140538329"></p><p><strong>特点</strong></p><p><img src="/.io//image-20230804140711348.png" alt="image-20230804140711348"></p><h3 id="3-5-2-吉比特以太网"><a href="#3-5-2-吉比特以太网" class="headerlink" title="3.5.2 吉比特以太网"></a>3.5.2 吉比特以太网</h3><p><strong>特点</strong></p><p><img src="/.io//image-20230804140737933.png" alt="image-20230804140737933"></p><h3 id="3-5-3-10吉比特以太网（10GE）和更快的以太网"><a href="#3-5-3-10吉比特以太网（10GE）和更快的以太网" class="headerlink" title="3.5.3 10吉比特以太网（10GE）和更快的以太网"></a>3.5.3 10吉比特以太网（10GE）和更快的以太网</h3><p><strong>特点</strong><img src="/.io//image-20230804140817558.png" alt="image-20230804140817558"></p><h3 id="3-5-4-使用以太网进行宽带接入"><a href="#3-5-4-使用以太网进行宽带接入" class="headerlink" title="3.5.4 使用以太网进行宽带接入"></a>3.5.4 使用以太网进行宽带接入</h3><p><strong>特点</strong></p><p><strong><img src="/.io//image-20230804140849208.png" alt="image-20230804140849208"></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/01/05/python%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/01/05/python%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="python学习"><a href="#python学习" class="headerlink" title="python学习"></a>python学习</h1><p>入门：</p><p>level0：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure><p>level1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">List1=(<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">x1=<span class="number">0</span></span><br><span class="line">x2=<span class="number">0</span></span><br><span class="line">list2=[<span class="string">&quot;第一把&quot;</span>,<span class="string">&quot;第二把&quot;</span>,<span class="string">&quot;第三把&quot;</span>,<span class="string">&quot;第四把&quot;</span>,<span class="string">&quot;第五把&quot;</span>]</span><br><span class="line">list3=[<span class="string">&quot;玩家胜利&quot;</span>,<span class="string">&quot;电脑胜利&quot;</span>,<span class="string">&quot;平局&quot;</span>]</span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(list2[i])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请出拳&quot;</span>)</span><br><span class="line">    a=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;&#x27;0&#x27;代表拳头&#x27;2&#x27;代表剪刀&#x27;5&#x27;代表布\n&quot;</span>))</span><br><span class="line">    b=random.choice(List1)</span><br><span class="line">    <span class="keyword">if</span> a==b:</span><br><span class="line">        <span class="built_in">print</span>(list3[<span class="number">2</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;本局重新开始&quot;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> a==<span class="number">0</span> <span class="keyword">and</span> b==<span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(list3[<span class="number">0</span>])</span><br><span class="line">        x1+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> a==<span class="number">0</span> <span class="keyword">and</span> b==<span class="number">5</span>:</span><br><span class="line">        <span class="built_in">print</span>(list3[<span class="number">1</span>])</span><br><span class="line">        x2+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> a==<span class="number">2</span> <span class="keyword">and</span> b==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(list3[<span class="number">1</span>])</span><br><span class="line">        x2+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> a==<span class="number">2</span> <span class="keyword">and</span> b==<span class="number">5</span>:</span><br><span class="line">        <span class="built_in">print</span>(list3[<span class="number">0</span>])</span><br><span class="line">        x1+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> a==<span class="number">5</span> <span class="keyword">and</span> b==<span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(list3[<span class="number">1</span>])</span><br><span class="line">        x2+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(list3[<span class="number">0</span>])</span><br><span class="line">        x1+=<span class="number">1</span></span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> x1==<span class="number">3</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;玩家获得了游戏的胜利&quot;</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> x2==<span class="number">3</span>:</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;电脑获得了游戏的胜利&quot;</span>)</span><br><span class="line">      <span class="keyword">break</span>   </span><br><span class="line"> </span><br><span class="line"><span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/.io//image-20230105223544426.png" alt="image-20230105223544426"></p><p><img src="/.io//image-20230105223559679.png" alt="image-20230105223559679"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/01/05/SRE/"/>
      <url>/2023/01/05/SRE/</url>
      
        <content type="html"><![CDATA[<h1 id="SRE："><a href="#SRE：" class="headerlink" title="SRE："></a>SRE：</h1><p>1.Linux中的一些简单的文件操作命令</p><p>特别关注：cd与ls</p><p>2.vim的使用</p><p>（cat加文件名会预览内容）</p><p>3.命令的共性：</p><p><img src="/.io//image-20230107110921354.png" alt="image-20230107110921354"></p><p>-加命令参数的简称，–加全称</p><p>4.成功的man！</p><p><img src="/.io//image-20230107111427521.png" alt="image-20230107111427521"></p><p><img src="/.io//image-20230107111515231.png" alt="image-20230107111515231"></p><p>linux的文件系统：</p><p><img src="/.io//image-20230107112446048.png" alt="image-20230107112446048"></p><p><img src="/.io//image-20230107112804590.png" alt="image-20230107112804590"></p><p><img src="/.io//image-20230107113020655.png" alt="image-20230107113020655"></p><p><img src="/.io//image-20230107113624989.png" alt="image-20230107113624989"></p><p><img src="/.io//image-20230107114332756.png" alt="image-20230107114332756"></p><p><img src="/.io//image-20230107121357961.png" alt="image-20230107121357961"></p><p>python:</p><p><img src="/.io//image-20230105202656929.png" alt="image-20230105202656929"></p><p><img src="/.io//image-20230105202739144.png" alt="image-20230105202739144"></p><p><img src="/.io//image-20230105202822621.png" alt="image-20230105202822621"></p><p><img src="/.io//image-20230105202850493.png" alt="image-20230105202850493"></p><p><img src="/.io//image-20230105202939278.png" alt="image-20230105202939278"></p><p>(直接交给你原来用c写的例题)</p><p><img src="/.io//image-20230105203030623.png" alt="image-20230105203030623"></p><p><img src="/.io//image-20230105203050074.png" alt="image-20230105203050074"></p><p><img src="/.io//image-20230105203215989.png" alt="image-20230105203215989"></p><p><img src="/.io//image-20230105203414935.png" alt="image-20230105203414935"></p><p><img src="/.io//image-20230105203623236.png" alt="image-20230105203623236"></p><p><img src="/.io//image-20230105203643793.png" alt="image-20230105203643793"></p><p><img src="/.io//image-20230105203807153.png" alt="image-20230105203807153"></p><p><img src="/.io//image-20230105203949004.png" alt="image-20230105203949004"></p><p><img src="/.io//image-20230105204218145.png" alt="image-20230105204218145"></p><p><img src="/.io//image-20230105204642001.png" alt="image-20230105204642001"></p><p><img src="/.io//image-20230105204746297.png" alt="image-20230105204746297"></p><p><img src="/.io//image-20230105205020634.png" alt="image-20230105205020634"></p><p><img src="/.io//image-20230105205159295.png" alt="image-20230105205159295"></p><p><img src="/.io//image-20230105205625532.png" alt="image-20230105205625532"></p><p><img src="/.io//image-20230105210003164.png" alt="image-20230105210003164"></p><p>(有点像是c中调用自己的库函数)</p><p><img src="/.io//image-20230105210301711.png" alt="image-20230105210301711"></p><p>（区别对待）</p><p><img src="/.io//image-20230105210752949.png" alt="image-20230105210752949"></p><p>（开始懵逼了老铁）</p><p><img src="/.io//image-20230105210909584.png" alt="image-20230105210909584"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/10/%E6%A0%88%E7%9A%84%E5%AE%9A%E4%B9%89/"/>
      <url>/2022/12/10/%E6%A0%88%E7%9A%84%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<p>​                                                                                       <strong>栈</strong></p><h1 id="栈的定义"><a href="#栈的定义" class="headerlink" title="栈的定义"></a>栈的定义</h1><p>栈（stack）又名堆栈，堆栈也是一种线性表，一种操作受限的线性表，只能在栈顶插入&#x2F;删除数据元素，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</p><h1 id="顺序栈的实现："><a href="#顺序栈的实现：" class="headerlink" title="顺序栈的实现："></a>顺序栈的实现：</h1><p><strong>堆栈的一些基本操作（地基）：</strong></p><p><img src="C:/Users/alex/AppData/Roaming/Typora/typora-user-images/image-20221210210150354.png" alt="image-20221210210150354"></p><h1 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a><strong>代码实现：</strong></h1><h2 id="1-栈的定义："><a href="#1-栈的定义：" class="headerlink" title="1.栈的定义："></a>1.栈的定义：</h2><p><img src="/.io//image-20221210232812197.png" alt="image-20221210232812197"></p><h2 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2.初始化"></a>2.初始化</h2><p><img src="/.io//image-20221210232927062.png" alt="image-20221210232927062"></p><h2 id="3-判断空栈"><a href="#3-判断空栈" class="headerlink" title="3.判断空栈"></a>3.判断空栈</h2><p><img src="/.io//image-20221210233016694.png" alt="image-20221210233016694"></p><h2 id="4-取栈顶元素"><a href="#4-取栈顶元素" class="headerlink" title="4.取栈顶元素"></a>4.取栈顶元素</h2><p><img src="/.io//image-20221210233153804.png" alt="image-20221210233153804"></p><h2 id="5-存储元素"><a href="#5-存储元素" class="headerlink" title="5.存储元素"></a>5.存储元素</h2><p><img src="/.io//image-20221210233410530.png" alt="image-20221210233410530"></p><h2 id="6-取出元素"><a href="#6-取出元素" class="headerlink" title="6.取出元素"></a>6.取出元素</h2><p><img src="/.io//image-20221210233237464.png" alt="image-20221210233237464"></p><h2 id="7-求栈长度"><a href="#7-求栈长度" class="headerlink" title="7.求栈长度"></a>7.求栈长度</h2><p><img src="/.io//image-20221210233508004.png" alt="image-20221210233508004"></p><h2 id="8-清空栈"><a href="#8-清空栈" class="headerlink" title="8.清空栈"></a>8.清空栈</h2><p><img src="/.io//image-20221210233548995.png" alt="image-20221210233548995"></p><h1 id="栈的应用："><a href="#栈的应用：" class="headerlink" title="栈的应用："></a>栈的应用：</h1><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><strong>将A,B,C,D,E,F存入栈，再将E,F取出，存入G,H,并且每次输出栈顶中的所有元素，最后输出栈的长度，所有元素。</strong></p><p>结果：<img src="/.io//image-20221211012944405.png" alt="image-20221211012944405"></p><p>代码：</p><p><img src="/.io//image-20221211011710074.png" alt="image-20221211011710074"></p><p><img src="/.io//image-20221211011746259.png" alt="image-20221211011746259"></p><p><img src="/.io//image-20221211011759376.png" alt="image-20221211011759376"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>c for class</title>
      <link href="/2022/11/27/%E9%A2%84%E4%B9%A0%E4%BD%9C%E4%B8%9A%EF%BC%9A/"/>
      <url>/2022/11/27/%E9%A2%84%E4%B9%A0%E4%BD%9C%E4%B8%9A%EF%BC%9A/</url>
      
        <content type="html"><![CDATA[<p><strong>预习作业</strong>：</p><h1 id="第一题："><a href="#第一题：" class="headerlink" title="第一题："></a>第一题：</h1><p>代码：<img src="/.io//image-20221127010623387.png" alt="image-20221127010623387"></p><p>结果：</p><p><img src="/.io//image-20221127010653511.png" alt="image-20221127010653511"></p><p><img src="/.io//image-20221127010731709.png" alt="image-20221127010731709"></p><h1 id="第二题："><a href="#第二题：" class="headerlink" title="第二题："></a>第二题：</h1><p><img src="/.io//image-20221127011042322.png" alt="image-20221127011042322"></p><p>成功写入：</p><p><img src="/.io//image-20221127011148325.png" alt="image-20221127011148325"></p><h1 id="第三题："><a href="#第三题：" class="headerlink" title="第三题："></a>第三题：</h1><p>代码：</p><p><img src="/.io//image-20221127011917598.png" alt="image-20221127011917598"></p><p>成功读取：</p><p><img src="/.io//image-20221127011839081.png" alt="image-20221127011839081"></p><h1 id="第四题："><a href="#第四题：" class="headerlink" title="第四题："></a>第四题：</h1><p>代码：</p><p>写入成功</p><p><img src="/.io//image-20221127111456038.png" alt="image-20221127111456038"></p><h1 id="第五题："><a href="#第五题：" class="headerlink" title="第五题："></a>第五题：</h1><p>代码：<img src="/.io//image-20221127112020973.png" alt="image-20221127112020973"></p><p>结果：</p><p><img src="/.io//image-20221127112152793.png" alt="image-20221127112152793"></p><h1 id="第六题："><a href="#第六题：" class="headerlink" title="第六题："></a>第六题：</h1><h2 id="1-结构体的概念："><a href="#1-结构体的概念：" class="headerlink" title="1.结构体的概念："></a>1.结构体的概念：</h2><p><img src="/.io//image-20221127113549763.png" alt="image-20221127113549763"></p><h2 id="2-结构体的定义："><a href="#2-结构体的定义：" class="headerlink" title="2.结构体的定义："></a>2.结构体的定义：</h2><p><img src="/.io//image-20221127114233449.png" alt="image-20221127114233449"></p><h2 id="3-结构体的使用："><a href="#3-结构体的使用：" class="headerlink" title="3.结构体的使用："></a>3.结构体的使用：</h2><h3 id="（1）变量的初始化："><a href="#（1）变量的初始化：" class="headerlink" title="（1）变量的初始化："></a>（1）变量的初始化：</h3><p>​</p><p><img src="/.io//image-20221127115447557.png" alt="image-20221127115447557"></p><p>​</p><h3 id="（2）结构体的输出（成员访问）："><a href="#（2）结构体的输出（成员访问）：" class="headerlink" title="（2）结构体的输出（成员访问）："></a>（2）结构体的输出（成员访问）：</h3><p>代码：<img src="/.io//image-20221127115429979.png" alt="image-20221127115429979"></p><p>结果：</p><p><img src="/.io//image-20221127115358502.png" alt="image-20221127115358502"></p><p><strong>注意：</strong></p><p><img src="/.io//image-20221127120018229.png" alt="image-20221127120018229"></p><h3 id="（3）结构体的赋值："><a href="#（3）结构体的赋值：" class="headerlink" title="（3）结构体的赋值："></a>（3）结构体的赋值：</h3><p>​代码：<img src="/.io//image-20221127121524532.png" alt="image-20221127121524532"></p><p>​结果：</p><p>​</p><p><img src="/.io//image-20221127121543275.png" alt="image-20221127121543275"></p><p>​                注意：字符串赋值使用errno_t strcat_s(<strong>char *_Dst</strong>, rsize_t _SizeInBytes, const char *_Src)函数，需要加入头文件——#include &lt;string.h&gt;</p><p>​疑问：如何让用户输入呢？</p><h4 id="（4）互相赋值：结构体变量可以相互赋值"><a href="#（4）互相赋值：结构体变量可以相互赋值" class="headerlink" title="（4）互相赋值：结构体变量可以相互赋值"></a>（4）互相赋值：结构体变量可以相互赋值</h4><p>​代码：</p><p><img src="/.io//image-20221127123120015.png" alt="image-20221127123120015"></p><p>结果：</p><p><img src="/.io//image-20221127123037598.png" alt="image-20221127123037598"></p><h1 id="4-数组结构体："><a href="#4-数组结构体：" class="headerlink" title="4.数组结构体："></a>4.数组结构体：</h1><p>可以理解成定义了n个同类型的结构体，他们没名字，有代号[n-1]</p><p>类比普通数组即可。</p><p>构造，输入，输出，赋值：</p><p><img src="/.io//image-20221127161316039.png" alt="image-20221127161316039"></p><p>结果：</p><p><img src="/.io//image-20221127161330307.png" alt="image-20221127161330307"></p><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><p>一个示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">STU</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">    <span class="type">char</span> num[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OutputSTU</span><span class="params">(<span class="keyword">struct</span> STU stu[<span class="number">5</span>])</span>;  <span class="comment">//函数声明, 该函数的功能是输出学号最大的学生信息</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">STU</span> <span class="title">stu</span>[5];</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">5</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入第%d个学生的信息:&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span> (<span class="string">&quot;%s%d %c%s&quot;</span>, stu[i].name, &amp;stu[i].age, &amp;stu[i].sex, stu[i].num);<span class="comment">/*%c前面要加空格, 不然输入时会将空格赋给%c*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    OutputSTU(stu);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OutputSTU</span><span class="params">(<span class="keyword">struct</span> STU stu[<span class="number">5</span>])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">STU</span> <span class="title">stumax</span> =</span> stu[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">1</span>; j&lt;<span class="number">5</span>; ++j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(stumax.num, stu[j].num) &lt; <span class="number">0</span>)  <span class="comment">//strcmp函数的使用</span></span><br><span class="line">        &#123;</span><br><span class="line">            stumax = stu[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;学生姓名：%s 学生年龄：%d 学生性别：%c 学生学号：%s\n&quot;</span>, stumax.name, stumax.age, stumax.sex, stumax.num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中的一个新函数：strcmp</p><p><img src="/.io//image-20221127161830350.png" alt="image-20221127161830350"></p><h1 id="最后一个：指针结构体"><a href="#最后一个：指针结构体" class="headerlink" title="最后一个：指针结构体"></a>最后一个：指针结构体</h1><p>首先要先打好结构体（node）的框架，再定义一个这种类型的结构体a，再定义一个这个结构体的指针变量，取走a的地址，就可以用指针来”替换“a（没开始学指针，只是初印象）</p><p>​代码：</p><p>定义，取地址，赋值，输入，输出：</p><p><img src="/.io//image-20221127165057737.png" alt="image-20221127165057737"></p><p>结果：<img src="/.io//image-20221127165120965.png" alt="image-20221127165120965"></p><p>疑问：为什么不能这样进行赋值呢？不对好像用指针无法进行初始化？</p><p><img src="/.io//image-20221127163715081.png" alt="image-20221127163715081"></p>]]></content>
      
      
      
        <tags>
            
            <tag> assignment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始学习c语言</title>
      <link href="/2022/11/25/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0c%E8%AF%AD%E8%A8%80/"/>
      <url>/2022/11/25/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0c%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="从零开始学习c语言"><a href="#从零开始学习c语言" class="headerlink" title="从零开始学习c语言"></a><em><strong>从零开始学习c语言</strong></em></h1><h1 id="常用快捷键："><a href="#常用快捷键：" class="headerlink" title="常用快捷键："></a>常用快捷键：</h1><p><img src="/.io//image-20221117014701069.png" alt="image-20221117014701069"></p><p>除html与php外其他多少和c语言沾边</p><p><img src="/.io//image-20221117021453185.png" alt="image-20221117021453185"></p><p>一些概念：</p><p><img src="/.io//image-20221117021840466.png" alt="image-20221117021840466"></p><p><img src="/.io//image-20221117021912231.png" alt="image-20221117021912231"></p><p><img src="/.io//image-20221117024217615.png" alt="image-20221117024217615"></p><h1 id="容量转换"><a href="#容量转换" class="headerlink" title="容量转换"></a>容量转换</h1><p><img src="/.io//image-20230104162014072.png" alt="image-20230104162014072"></p><h1 id="浮点数的储存形式"><a href="#浮点数的储存形式" class="headerlink" title="浮点数的储存形式"></a>浮点数的储存形式</h1><p><img src="/.io//image-20230104175053588.png" alt="image-20230104175053588"></p><h1 id="二进制：1-10进转2进（小数有精度要求）"><a href="#二进制：1-10进转2进（小数有精度要求）" class="headerlink" title="二进制：1.  10进转2进（小数有精度要求）"></a>二进制：1.  10进转2进（小数有精度要求）</h1><p><img src="/.io//Users\alex\AppData\Roaming\Typora\typora-user-images\image-20221115222016901.png" alt="image-20221115222016901"></p><p>整数自下而上，小数自下而上</p><p><strong>自己做了个二进制</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jsut a sudden spark for fun.(for int number)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">int</span>  i=<span class="number">10000</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> option;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please choose the option you want:\n&#x27;B&#x27;for decimal to binary\n&#x27;D&#x27;for binary to decimal\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;option);</span><br><span class="line">    <span class="keyword">if</span>(option==<span class="string">&#x27;B&#x27;</span>)&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> n;</span><br><span class="line">    <span class="type">long</span> <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please input an integer\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">    <span class="type">int</span> number[i];</span><br><span class="line">    <span class="keyword">while</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">       </span><br><span class="line">        number[j]=n%<span class="number">2</span>;</span><br><span class="line">        n/=<span class="number">2</span>;</span><br><span class="line">         j++;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">int</span> x=j<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(x;x&gt;=<span class="number">0</span>;x--)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,number[x]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span>(option==<span class="string">&#x27;D&#x27;</span>)&#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> m=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> b=<span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> number[i];</span><br><span class="line">        <span class="type">int</span> z=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Please input a binary number\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%llu&quot;</span>,&amp;m);</span><br><span class="line">        <span class="keyword">while</span>(m!=<span class="number">0</span>)&#123;</span><br><span class="line">        number[z]=m%b;</span><br><span class="line">        m/=b;</span><br><span class="line">        z++;</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(y;y&lt;z;y++)&#123;</span><br><span class="line">            sum+=number[y]*<span class="built_in">pow</span>(<span class="number">2</span>,y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>数据太大了hold不住了·怎么办？</p><p>（关于我睡了一觉突然灵光一现了，我们十进制转二进制用数组储存超20位的数据，那么我们二进制转十进制</p><p>不就可以用数组读入一个超20位的数据吗？）</p><p><strong>升级版（待改进）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">int</span>  i=<span class="number">10000</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> option;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please choose the option you want:\n&#x27;B&#x27;for decimal to binary\n&#x27;D&#x27;for binary to decimal\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;option);</span><br><span class="line">    <span class="keyword">if</span>(option==<span class="string">&#x27;B&#x27;</span>)&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> n;</span><br><span class="line">    <span class="type">long</span> <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please input an integer\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">    <span class="type">int</span> number[i];</span><br><span class="line">    <span class="keyword">while</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">       </span><br><span class="line">        number[j]=n%<span class="number">2</span>;</span><br><span class="line">        n/=<span class="number">2</span>;</span><br><span class="line">         j++;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">int</span> x=j<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(x;x&gt;=<span class="number">0</span>;x--)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,number[x]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span>(option==<span class="string">&#x27;D&#x27;</span>)&#123;</span><br><span class="line">        <span class="type">int</span> number[i];</span><br><span class="line">        <span class="type">int</span> z=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ret=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Please input a binary number,then input a letter to stop\n&quot;</span>);</span><br><span class="line">       <span class="keyword">do</span>&#123;</span><br><span class="line">         ret=<span class="built_in">scanf</span>(<span class="string">&quot;%1d&quot;</span>,&amp;number[z]);</span><br><span class="line">         ++z;</span><br><span class="line">         &#125;<span class="keyword">while</span>(ret==<span class="number">1</span>);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> y=z<span class="number">-2</span>;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(y,j;y&gt;=<span class="number">0</span>,j&lt;z<span class="number">-1</span>;y--,j++)&#123;</span><br><span class="line">            sum+=number[y]*<span class="built_in">pow</span>(<span class="number">2</span>,j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/.io//image-20221118232030474.png" alt="image-20221118232030474"></p><p><strong>这是学长和老师给出的解释（）明天试试</strong></p><p>[^已用字符串数组解决，代码放在answer了]: </p><p>用补码。</p><p><img src="/.io//image-20221116005548142.png" alt="image-20221116005548142"></p><h1 id="补码怎么求？"><a href="#补码怎么求？" class="headerlink" title="补码怎么求？"></a>补码怎么求？</h1><p><img src="/.io//image-20221117003141327.png" alt="image-20221117003141327"></p><p>八进制</p><p><img src="/.io//image-20221117004034441.png" alt="image-20221117004034441"></p><p>十六进制</p><p><img src="/.io//image-20221117004527624.png" alt="image-20221117004527624"></p><p>比武大会的一个不错的题目：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 65  <span class="comment">//增加一个字符用来放标识符，便于判断。</span></span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="title function_">myPow</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> x)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">char</span> str[N]=&#123;<span class="number">0</span>&#125;,i=<span class="number">0</span>;    <span class="comment">//str初始化为空字符,下标计数i不会超过N，所以用char类型就可以，用int当然也可以。</span></span><br><span class="line">   <span class="type">long</span> <span class="type">long</span> sum=<span class="number">0</span>;  <span class="comment">//这里为什么不能用int？</span></span><br><span class="line">   <span class="keyword">while</span>((str[i++]=getchar())!=<span class="string">&#x27;\n&#x27;</span>) <span class="comment">//先不考虑用户在中途输入非法字符的情况，如果需要考虑的话就需要增加判断条件</span></span><br><span class="line">      <span class="keyword">if</span>(i==N)  <span class="keyword">break</span>;<span class="comment">//做边界判断</span></span><br><span class="line">   str[i<span class="number">-1</span>] = <span class="string">&#x27;\n&#x27;</span>;   <span class="comment">//  str[i-1]读到的是&#x27;\n&#x27;，或者i为N的时候，str[i-1]也超出64个字符，这时也强行赋值为&#x27;\n&#x27;，逻辑就一致。等学了字符串之后，我们会强行赋值为&#x27;\0&#x27;</span></span><br><span class="line">   <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">&#x27;0&#x27;</span>)  <span class="comment">//这时str[0]是最高位为符号位</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;str[j]!=<span class="string">&#x27;\n&#x27;</span>;j++)</span><br><span class="line">       &#123;</span><br><span class="line">          <span class="keyword">if</span>(str[j]==<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span>((i<span class="number">-2</span>)-j&gt;=<span class="number">0</span>) <span class="comment">//这个判断不要也没问题，要了是为了更好读。</span></span><br><span class="line">               sum+=myPow(<span class="number">2</span>,(i<span class="number">-2</span>)-j);<span class="comment">//有效元素的下标是i-2,因为str[i-1]==&#x27;\n&#x27;</span></span><br><span class="line">       &#125;<span class="comment">//这个大括号不能省略，否则后面那个else会匹配到这个if，我在讲选择结构时详细说明了原因。</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">&#x27;1&#x27;</span>)  <span class="comment">//这时str[0]也就是符号位为1为负数的补码</span></span><br><span class="line">   &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;str[j]!=<span class="string">&#x27;\n&#x27;</span>;j++)  <span class="comment">//这时str[0]上的1是符号位，从次高位开始不为1的数据为真实数据，因为负数的补码前面再多的1都不影响结果</span></span><br><span class="line">           &#123;</span><br><span class="line">              <span class="keyword">if</span>(str[j]==<span class="string">&#x27;0&#x27;</span>)   <span class="comment">//补码是怎么来的？是符号位为1，其他位为对应的正数原码取反再+1得到的;补码的本质是从0减下来的，0-1得到的是-1的补码、0-2得到的是-2的补码；</span></span><br><span class="line">                <span class="keyword">if</span>((i<span class="number">-2</span>)-j&gt;=<span class="number">0</span>) <span class="comment">//这判断可以不要，不影响逻辑和结果</span></span><br><span class="line">                   sum+=myPow(<span class="number">2</span>,(i<span class="number">-2</span>)-j);</span><br><span class="line">           &#125;</span><br><span class="line">        sum= -(sum+<span class="number">1</span>);  <span class="comment">//因为是原码取反后再加1得到的，这里也需要加1再取相反数。注意按位取反和取相反数是不同的计算。</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span>    <span class="comment">//如果字符数组得到的第一个元素就是换行符或者是0或1之外的字符，说明用户没有输入过数字或者第一个字符就输入了非法的字符</span></span><br><span class="line">     &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;No number\n&quot;</span>);<span class="comment">//用户的输入不是有效输入</span></span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);  <span class="comment">//程序退出</span></span><br><span class="line">     &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;decimal=%lld\n&quot;</span>,sum);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="title function_">myPow</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="type">long</span> <span class="type">long</span> powNum=<span class="number">1</span>;<span class="comment">//powNum会参与乘积的计算，先赋初值为1；如果这个变量需要做累加计算的话，就要先赋值为0.</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=x;i++)  <span class="comment">//如果形参接收的x为0，这个循环不执行，返回的powNum是1</span></span><br><span class="line">        powNum *= a;</span><br><span class="line">     <span class="keyword">return</span> powNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="gets-gets-s-fgets之间的区别。"><a href="#gets-gets-s-fgets之间的区别。" class="headerlink" title="gets,gets_s,fgets之间的区别。"></a><strong>gets,gets_s,fgets之间的区别。</strong></h1><h2 id="换行符的处理："><a href="#换行符的处理：" class="headerlink" title="换行符的处理："></a>换行符的处理：</h2><ol><li>gets会将最后的’\n’改成’\0’,gets_s会把最后的’\n’直接丢弃，fgets直接读取’\n’</li><li>gets_s会将未读取的数据直接清空（为了读取数据不出幺蛾子),而fgets会保留未读取的部分，gets如果数据越界了会将不属于他的数据给覆盖，有很大的安全隐患。</li><li>fgets的使用：char *fgets(char *<strong>restrict</strong> _Buf, int _MaxCount, FILE *<strong>restrict</strong> _File)</li></ol><p>粒子：</p><p>a&#x3D;20;</p><p>char[a];</p><p>fgets(a,20,stdin);（stdin从用户那里读入数据，如果这里是文件名的话那么从文件读取数据）</p><p><strong>补充：</strong></p><p>stdin与stdout：stdin是标准输入流，是标准输出流，类似于scanf与printf。（升级版plus）</p><h1 id="逗号表达式"><a href="#逗号表达式" class="headerlink" title="逗号表达式"></a>逗号表达式</h1><p><img src="/.io//image-20230104175624280.png" alt="image-20230104175624280"></p><h1 id="普通运算"><a href="#普通运算" class="headerlink" title="普通运算"></a>普通运算</h1><p><img src="/.io//image-20230104181322654.png" alt="image-20230104181322654"></p><p>运算符优先级：</p><p><img src="/.io//image-20230104182033272.png" alt="image-20230104182033272"></p><p>如何求复杂表达式的值？</p><p><img src="/.io//image-20230104182619562.png" alt="image-20230104182619562"></p><h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算:"></a>位运算:</h1><p>相关运算符</p><p><img src="/.io//image-20230104184148208.png" alt="image-20230104184148208"></p><p>1.（可以升级之前的一些操作，比如说判断奇偶数，按位与会更快一点）</p><p>只要有0就是0</p><p><img src="/.io//image-20230104184629199-1672829191018-1.png" alt="image-20230104184629199"></p><p>2.只要有一就是一<img src="/.io//image-20230104185352538.png" alt="image-20230104185352538"></p><p>3.正常性取向（）</p><p><img src="/.io//image-20230104185833513.png" alt="image-20230104185833513"></p><p>4.按位左移与按位右移在没有溢出的条件下分别对应乘了2的n次方</p><p><img src="/.io//image-20230105100211093.png" alt="image-20230105100211093"></p><p>（绷不住了，寒假白兰到还有17天）</p><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><p>（1）结构体内存分配原则：</p><ul><li>原则一：结构体中元素按照定义顺序存放到内存中，但并不是紧密排列。从结构体存储的首地址开始 ，每一个元素存入内存中时，它都会认为内存是以自己的宽度来划分空间的，因此元素存放的位置一定会在自己大小的整数倍上开始。</li><li>原则二： 在原则一的基础上，检查计算出的存储单元是否为所有元素中最宽的元素长度的整数倍。若是，则结束；否则，将其补齐为它的整数倍。</li></ul><p>（2）定义位域时，各个成员的类型最好保持一致，比如都用char，或都用int，不要混合使用，这样才能达到节省内存空间的目的。</p><h1 id="sscanf与sprintf语法"><a href="#sscanf与sprintf语法" class="headerlink" title="sscanf与sprintf语法"></a>sscanf与sprintf语法</h1><h2 id="scsanf"><a href="#scsanf" class="headerlink" title="scsanf():"></a>scsanf():</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//昨天练习题目的参考答案：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">double</span> sum=<span class="number">0</span>,num1,num2;</span><br><span class="line">   <span class="type">char</span> a[]=<span class="string">&quot;123.45 456.78&quot;</span>;</span><br><span class="line">   <span class="type">char</span> b[<span class="number">30</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">   &#123;<span class="built_in">sscanf</span>(a,<span class="string">&quot;%lf%lf&quot;</span>,&amp;num1,&amp;num2);&#125;</span><br><span class="line">   sum=num1+num2;</span><br><span class="line">   <span class="built_in">sprintf</span>(b,<span class="string">&quot;sum=%f&quot;</span>,sum);</span><br><span class="line">   <span class="built_in">puts</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>C 库函数 <strong>int sscanf(const char *str, const char *format, …)</strong> 从字符串读取格式化输入。</p><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>下面是 sscanf() 函数的声明。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sscanf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *format, ...)</span></span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>下面的实例演示了 sscanf() 函数的用法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> day, year;</span><br><span class="line">   <span class="type">char</span> weekday[<span class="number">20</span>], month[<span class="number">20</span>], dtm[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">   <span class="built_in">strcpy</span>( dtm, <span class="string">&quot;Saturday March 25 1989&quot;</span> );</span><br><span class="line">   <span class="built_in">sscanf</span>( dtm, <span class="string">&quot;%s %s %d  %d&quot;</span>, weekday, month, &amp;day, &amp;year );</span><br><span class="line"></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%s %d, %d = %s\n&quot;</span>, month, day, year, weekday );</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">32</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sscanf</span>(<span class="string">&quot;123456abcdedf&quot;</span>, <span class="string">&quot;%31[0-9]&quot;</span>, str);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str=%s/n&quot;</span>, str);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str=<span class="number">123456</span></span><br></pre></td></tr></table></figure><p>上面的格式中，[0-9]表示这是一个仅包含0-9这几个字符的字符串，前面使用数字31修饰词表示这个字符串缓冲区的最大长度</p><h2 id="sprintf"><a href="#sprintf" class="headerlink" title="sprintf():"></a>sprintf():</h2><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p>C 库函数 <strong>int sprintf(char *str, const char *format, …)</strong> 发送格式化输出到 <strong>str</strong> 所指向的字符串。</p><h3 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h3><p>下面是 sprintf() 函数的声明。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sprintf</span><span class="params">(<span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *format, ...)</span></span><br></pre></td></tr></table></figure><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>下面的实例演示了 sprintf() 函数的用法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"> <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line">   <span class="type">char</span> str[<span class="number">80</span>];</span><br><span class="line"></span><br><span class="line">   <span class="built_in">sprintf</span>(str, <span class="string">&quot;Pi 的值 = %f&quot;</span>, M_PI);</span><br><span class="line">   <span class="built_in">puts</span>(str);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h2 id="1-定义（略）"><a href="#1-定义（略）" class="headerlink" title="1.定义（略）"></a>1.定义（略）</h2><h2 id="2-指针的算数意义"><a href="#2-指针的算数意义" class="headerlink" title="2.指针的算数意义"></a>2.指针的算数意义</h2><ul><li>指针的每一次递增，它其实会指向下一个元素的存储单元。</li><li>指针的每一次递减，它都会指向前一个元素的存储单元。</li><li>指针在递增和递减时跳跃的字节数取决于指针所指向变量数据类型长度，比如 int 就是 4 个字节。</li></ul><h2 id="3-指针数组"><a href="#3-指针数组" class="headerlink" title="3.指针数组"></a>3.指针数组</h2><p>用一个指向字符的指针数组来存储一个字符串列表，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX = <span class="number">4</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">const</span> <span class="type">char</span> *names[] = &#123;</span><br><span class="line">                   <span class="string">&quot;Zara Ali&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;Hina Ali&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;Nuha Ali&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;Sara Ali&quot;</span>,</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; MAX; i++)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Value of names[%d] = %s\n&quot;</span>, i, names[i] );</span><br><span class="line">    <span class="comment">//names[i]前面不需要加*，因为c中字符串指针输出全部只需要开头的指针，</span></span><br><span class="line">    <span class="comment">//即数组名str，加了*只会取出第一个元素</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Value of names[0] = Zara Ali</span><br><span class="line">Value of names[1] = Hina Ali</span><br><span class="line">Value of names[2] = Nuha Ali</span><br><span class="line">Value of names[3] = Sara Ali</span><br></pre></td></tr></table></figure><h2 id="4-指向指针的指针"><a href="#4-指向指针的指针" class="headerlink" title="4.指向指针的指针"></a>4.指向指针的指针</h2><p>（二维数组中有所体现）</p><h2 id="5-从函数返回指针"><a href="#5-从函数返回指针" class="headerlink" title="5.从函数返回指针"></a>5.从函数返回指针</h2><p>static int  r[10];&#x2F;&#x2F;函数里的变量如果想返回地址需要加上static</p><p><img src="/.io//image-20230201230854265-1675264144663-1.png" alt="image-20230201230854265"></p><h2 id="6-函数指针"><a href="#6-函数指针" class="headerlink" title="6.函数指针"></a>6.函数指针</h2><p>函数指针是指向函数的指针变量。</p><p>通常我们说的指针变量是指向一个整型、字符型或数组等变量，而函数指针是指向函数。</p><p>函数指针可以像一般函数一样，用于调用函数、传递参数。</p><h4 id="函数指针变量的声明："><a href="#函数指针变量的声明：" class="headerlink" title="函数指针变量的声明："></a>函数指针变量的声明：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*fun_ptr)</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span>; <span class="comment">// 声明一个指向同样参数、返回值的函数指针类型</span></span><br></pre></td></tr></table></figure><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><p>‘’函数指针作为某个函数的参数’‘</p><p>函数指针变量可以作为某个函数的参数来使用的，回调函数就是一个通过函数指针调用的函数。</p><p>简单讲：回调函数是由别人的函数执行时调用你实现的函数。</p><blockquote><p>以下是来自知乎作者常溪玲的解说：</p><p>你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> learning progress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>answer</title>
      <link href="/2022/10/29/answer/"/>
      <url>/2022/10/29/answer/</url>
      
        <content type="html"><![CDATA[<h1 id="错题1"><a href="#错题1" class="headerlink" title="错题1*"></a><em>错题1</em>*<img src="/.io//answer/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_20221028_132523-1667192539473-5.png"></h1><p>假设b已经是a的因子之和，那么只要证明b的因子之和也等于a即可，如此简化了计算</p><h1 id="无题（太逆天了）"><a href="#无题（太逆天了）" class="headerlink" title="无题（太逆天了）"></a><u><em><strong>无题</strong></em></u>（太逆天了）</h1><p><img src="/.io//answer/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_20221028_140506-1667192552740-7.png"></p><p><img src="/.io//answer/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_20221028_152146-1667192562705-9.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我的理解，虽然一开始没写出来呜呜呜（从E到A）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">4</span>;x&lt;=<span class="number">10000</span>; x+=<span class="number">4</span>)</span><br><span class="line">    &#123;   <span class="type">int</span> a=x;</span><br><span class="line">        <span class="keyword">while</span> (x % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; i &lt;= <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        </span><br><span class="line">            x = <span class="number">1.25</span> * x + <span class="number">1</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((x - <span class="number">1</span>) % <span class="number">20</span> == <span class="number">0</span> &amp;&amp; i == <span class="number">6</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Total number of fish catched=%d\n&quot;</span>, x);</span><br><span class="line">           </span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        x=a;</span><br><span class="line">        i =<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#96;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是直接从A到E的方法（自己写的！！！！！）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">626</span>;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> n=x<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (n;n&lt;=<span class="number">3200</span>; n+=<span class="number">5</span>)</span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">while</span> ((x<span class="number">-1</span>) % <span class="number">5</span> == <span class="number">0</span> &amp;&amp; i &lt;= <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        </span><br><span class="line">            x =  (x - <span class="number">1</span>)*<span class="number">0.8</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( i == <span class="number">6</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Total number of fish catched=%d\n&quot;</span>, n<span class="number">-4</span>);</span><br><span class="line">           </span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        x=n+<span class="number">1</span>;</span><br><span class="line">        i =<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/.io//answer/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_20221030_221648.png"></p><p>​        <em><strong><u>注意有些时候也得用上宏常量</u></strong></em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//参考答案（我和他是同一个思路，但是我忽略了金融是很“精准”的，一般情况下不可以用double这样的近似数，不然数据最后出来会有偏差，所以我们要用到宏常量）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  RATE  0.01875</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  MONTHS 12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  CAPITAL 1000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  YEARS 5</span></span><br><span class="line">main()</span><br><span class="line">&#123;       </span><br><span class="line">    <span class="type">int</span>  i;</span><br><span class="line">    <span class="type">double</span> deposit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; YEARS; i++)</span><br><span class="line">    &#123;       </span><br><span class="line">        deposit = (deposit + CAPITAL) / (<span class="number">1</span> + RATE * MONTHS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;He must save %.2f at the first year.\n&quot;</span>, deposit);</span><br><span class="line">&#125;       </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>你好漂亮</p><p>yalima怎么这么难搞（scanf有返回值，每成功读取到一个数加1，没读到为0，形式为a&#x3D;scanf(“”);</p><p><img src="/.io//answer/image-20221104213220993.png" alt="image-20221104213220993"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x1=<span class="number">0</span>,x2=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> re=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (re!=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Input x1, x2:\n&quot;</span>);</span><br><span class="line">        re=<span class="built_in">scanf</span>(<span class="string">&quot;%d,%d&quot;</span>,&amp;x1,&amp;x2);</span><br><span class="line">        <span class="keyword">if</span>(re!=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(getchar()!=<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span>(x1*x2&lt;<span class="number">0</span>)&#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;x1=%d,x2=%d\n&quot;</span>, x1, x2);</span><br><span class="line">         re=<span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        re=<span class="number">0</span>; </span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这题要分闰年和每月的天数</p><p>问题是每年的天数还不一样，还得做一个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>,Sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%4d-%2d-%2d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">    <span class="type">int</span> MAX[<span class="number">12</span>]=&#123;<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line">    <span class="comment">//利用数组记录每月月数</span></span><br><span class="line">    <span class="comment">//闰年改二月的日期</span></span><br><span class="line">    <span class="keyword">if</span>(a%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;a%<span class="number">100</span>!=<span class="number">0</span>&amp;&amp;a%<span class="number">400</span>==<span class="number">0</span>)</span><br><span class="line">    MAX[<span class="number">1</span>]=<span class="number">29</span>;</span><br><span class="line">    <span class="comment">//计算？月距离一月一号过了多少天</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;b;i++)&#123;</span><br><span class="line">        sum+=MAX[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1990</span>;j&lt;a;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;a%<span class="number">100</span>!=<span class="number">0</span>&amp;&amp;a%<span class="number">400</span>==<span class="number">0</span>)</span><br><span class="line">            Sum+=<span class="number">366</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Sum+=<span class="number">365</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ret=(sum+Sum+c)%<span class="number">5</span>;</span><br><span class="line">    <span class="keyword">if</span>(b&lt;<span class="number">0</span>||b&gt;<span class="number">12</span>||c&lt;<span class="number">0</span>||c&gt;MAX[b<span class="number">-1</span>])&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Invalid input.&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ret==<span class="number">0</span>||ret==<span class="number">4</span>)</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;He is having a rest.&quot;</span>);</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;He is working.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="rand-的使用方法"><a href="#rand-的使用方法" class="headerlink" title="rand()的使用方法"></a><em><strong>rand()的使用方法</strong></em></h1><img src="/.io//answer/image-20221106211446271.png" alt="image-20221106211446271" style="zoom: 80%;"><p>简单点：rand()%(b-a+1)+a表示【a，b】区间</p><p>一般使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">98</span>;</span><br><span class="line">    <span class="type">int</span> b=<span class="number">678</span>;</span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    number=rand()%(b-a+<span class="number">1</span>)+a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,number);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>assert用法：</p><p>类似于if语句，但它快一点，不影响效率。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先打个头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line">assert(.....);<span class="comment">//这里有分号，而且它加不了大括号。</span></span><br><span class="line">.......</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1533703751407</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">编程验证哥德巴赫猜想：任意一个充分大的偶数，可以用两个素数之和表示。如：</span><br><span class="line">4 = 2 + 2    6 = 3 + 3。</span><br><span class="line">**输入格式要求：&quot;%d&quot; 提示信息：&quot;Input a number:\n&quot; 输入奇数时报错： &quot;Input error!\n&quot;</span><br><span class="line">**输出格式要求：输入偶数时显示&quot;%d=%d+%d\n&quot;</span><br><span class="line">程序的运行的输入输出样例1：</span><br><span class="line">屏幕先显示提示信息：</span><br><span class="line">Input a number:</span><br><span class="line">然后用户键盘输入：</span><br><span class="line">9</span><br><span class="line">最后屏幕输出：</span><br><span class="line">Input error!         </span><br><span class="line">程序的运行的输入输出样例2：</span><br><span class="line">屏幕先显示提示信息：</span><br><span class="line">Input a number:</span><br><span class="line">然后用户键盘输入：</span><br><span class="line">100</span><br><span class="line">最后屏幕输出：</span><br><span class="line">100=3+97</span><br></pre></td></tr></table></figure><p>日哦，for里面的自增变量打错了，搞起我循环没出来。。。。。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isprime</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">    <span class="type">int</span> isprime=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;<span class="built_in">sqrt</span>(a);i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a%i==<span class="number">0</span>)</span><br><span class="line">        isprime=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> isprime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Input a number:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Input error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(isprime(i)&amp;&amp;isprime(j)&amp;&amp;(i+j)==n)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d=%d+%d&quot;</span>,n,i,j);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="有意思的一题"><a href="#有意思的一题" class="headerlink" title="有意思的一题"></a>有意思的一题</h1><p><strong>魔术师利用一副牌中的13张黑桃，预先将它们排好后迭在一起，牌面朝下。对观众说：我不看牌，只数数就可以猜到每张牌是什么，我大声数数，你们听，不信？你们就看。魔术师将最上面的那张牌数为1，把它翻过来正好是黑桃A，将黑桃A放在桌子上，然后按顺序从上到下数手上的余牌，第二次数1、2，将第一张牌放在这迭牌的下面，将第二张牌翻过来，正好是黑桃2，也将它放在桌子上，第三次数1、2、3，将前面两张依次放在这迭牌的下面，再翻第三张牌正好是黑桃3。这样依次进行将13张牌全翻出来，准确无误。问魔术师手中的牌原始顺序是怎样安排的？</strong>（有点意思，不难但是没思路会很痛苦）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我的解法</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="type">int</span> number[<span class="number">13</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(n=<span class="number">1</span>;n&lt;=<span class="number">13</span>;n++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(i;i&lt;<span class="number">13</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(number[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">                ret=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(count==n)&#123;</span><br><span class="line">                number[i]=n;</span><br><span class="line">                ret=<span class="number">1</span>;</span><br><span class="line">                count=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ret==<span class="number">0</span>)&#123;</span><br><span class="line">            n--;</span><br><span class="line">            i=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">13</span>;j++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>,number[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个大哥写的代码，我现在还看不明白。（代码武林里面的位运算，还不会，得学）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printBinary</span><span class="params">(<span class="type">int</span> num)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">        printBinary(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printBinary</span><span class="params">(<span class="type">int</span> num)</span></span><br><span class="line">&#123;    </span><br><span class="line">    <span class="type">int</span> cnt=(<span class="keyword">sizeof</span>(num)&lt;&lt;<span class="number">3</span>)<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=cnt;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> temp=num&gt;&gt;i;</span><br><span class="line">        <span class="type">int</span> b=temp&amp;<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组如何定义？"><a href="#数组如何定义？" class="headerlink" title="数组如何定义？"></a>数组如何定义？</h1><p><strong>) 定义数组时给所有元素赋初值</strong>，这叫“完全初始化”。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int a[5] = &#123;1, 2, 3, 4, 5&#125;;</span><br></pre></td></tr></table></figure><p><strong>2) 可以只给一部分元素赋值</strong>，这叫“不完全初始化”。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int a[5] = &#123;1, 2&#125;;</span><br></pre></td></tr></table></figure><p>需要注意的是，“不完全初始化”和“完全不初始化”不一样。如果“完全不初始化”，即只定义“int a[5]；”而不初始化，那么各个元素的值就不是0了，所有元素都是垃圾值。（有些编译器会自动给你变成0）</p><p>你也不能写成“int a[5]&#x3D;{}；”。如果大括号中什么都不写，那就是极其严重的语法错误。大括号中最少要写一个数。比如“int  a[5]&#x3D;{0}；”，这时就是给数组“清零”（我的vs要放在主函数前面），此时数组中每个元素都是零。此外，如果定义的数组的长度比花括号中所提供的初值的个数少，也是语法错误，如“a[2]&#x3D;{1，2，3，4，5}；（会占据其他数据的位置）</p><p><strong>3) 如果定义数组时就给数组中所有元素赋初值，那么就可以不指定数组的长度，因为此时元素的个数已经确定了。</strong>编程时我们经常都会使用这种写法，因为方便，既不会出问题，也不用自己计算有几个元素，系统会自动分配空间。例如：</p><p>（很多的时候你怎么办嘛）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int a[5] = &#123;1, 2, 3, 4, 5&#125;;</span><br></pre></td></tr></table></figure><p>可以写成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int a[] = &#123;1, 2, 3, 4, 5&#125;;</span><br></pre></td></tr></table></figure><p>第二种写法的花括号中有 5 个数，所以系统会自动定义数组 a 的长度为 5。但是要注意，只有在定义数组时就初始化才可以这样写。如果定义数组时不初始化，那么省略数组长度就是语法错误。比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int a[];</span><br></pre></td></tr></table></figure><p>那么编译时就会提示错误，编译器会提示你没有指定数组的长度。</p><p>**4.**输入数字时必须用 for 循环进行输入。而输入字符串时无须用循环，直接用 scanf 就可以了。(确实真的爽)</p><p><a href="//jsut%20a%20sudden%20spark%20for%20fun.(for%20int%20number)%0A#include%20%3Cstdio.h%3E%0A#include%20%3Cmath.h%3E%0Aint%20%20i=10000;%0Aint%20main()%7B%0A%20%20%20%20char%20option;%0A%20%20%20%20printf(%22Please%20choose%20the%20option%20you%20want:%5Cn'B'for%20decimal%20to%20binary(10-%3E2)%5Cn'D'for%20binary%20to%20decimal(2-%3E10)%5Cn%22"></a></p><p>理解了一点字符数组和字符串数组再改进的二进制转换器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jsut a sudden spark for fun.(for int number)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">int</span>  i=<span class="number">10000</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> option;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please choose the option you want:\n&#x27;B&#x27;for decimal to binary(10-&gt;2)\n&#x27;D&#x27;for binary to decimal(2-&gt;10)\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;option);</span><br><span class="line">    <span class="keyword">if</span>(option==<span class="string">&#x27;B&#x27;</span>)&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> n;</span><br><span class="line">    <span class="type">long</span> <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please input an integer\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">    <span class="type">int</span> number[i];</span><br><span class="line">    <span class="keyword">while</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">       </span><br><span class="line">        number[j]=n%<span class="number">2</span>;</span><br><span class="line">        n/=<span class="number">2</span>;</span><br><span class="line">         j++;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">int</span> x=j<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(x;x&gt;=<span class="number">0</span>;x--)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,number[x]);</span><br><span class="line"> &#125;<span class="comment">//算输入了多少位二进制数（以后求位数有新选择了）</span></span><br><span class="line">    <span class="type">char</span>  number[<span class="number">32</span>];</span><br><span class="line">    <span class="type">int</span> <span class="title function_">len</span><span class="params">(<span class="type">char</span> number [])</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(number[len])</span><br><span class="line">        len++;</span><br><span class="line">    <span class="keyword">return</span> len;    </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>(option==<span class="string">&#x27;D&#x27;</span>)&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> sum;</span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;number);</span><br><span class="line">     count=len(number);</span><br><span class="line">     <span class="keyword">for</span>(i=count<span class="number">-1</span>,j=<span class="number">0</span>;i&gt;=<span class="number">0</span> ;i--,j++)</span><br><span class="line">     &#123;</span><br><span class="line">     sum+=(number[i]<span class="number">-48</span>)*<span class="built_in">pow</span>(<span class="number">2</span>,j);   </span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;%ld&quot;</span>,sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="字符类数组的自我理解："><a href="#字符类数组的自我理解：" class="headerlink" title="字符类数组的自我理解："></a><strong>字符类数组的自我理解：</strong></h1><p><strong>1.</strong>      char[20]可以理解成char[20] [1]这个东西</p><ol start="2"><li>然后字符串可以看成char[a] [b]，一共有a个子块，每个子块的位数为b，例如</li></ol><p>   ”广域网“，”经纬度“，”互换了“。。。。。</p><p>   3.如果a&#x3D;1；那么我们可以写成char[20]这种的字符串数组（是不是和第一点很像？其实他们就差了个%c与%s</p><p>   4.这种数组好像可以做函数参数，感觉挺方便的wwww，有空学习一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">鲁智深吃馒头</span><br><span class="line">据说，鲁智深一天中午匆匆来到开封府大相国寺，想蹭顿饭吃，当时大相国寺有99个和尚，只做了99个馒头，智清长老不愿得罪鲁智深，便把他安排在一个特定位置，之后对所有人说，从我开始报数（围成一圈），第5个人可以吃到馒头（并退下），按照这个公平的方法，所有和尚都吃到了馒头，唯独鲁智深没有吃上。请问他在哪个位置？</span><br><span class="line">要求编程计算该位置并输出。</span><br><span class="line">输入格式:无</span><br><span class="line">输出格式：</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> a[<span class="number">100</span>]=&#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span>(i,k;k&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[i]==<span class="number">0</span>)</span><br><span class="line">        j++;</span><br><span class="line">    <span class="keyword">if</span>((j%<span class="number">5</span>==<span class="number">0</span>)&amp;&amp;a[i]==<span class="number">0</span>)&#123;</span><br><span class="line">       a[i]=<span class="number">1</span>;</span><br><span class="line">       k++;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">if</span>(i==<span class="number">100</span>)  </span><br><span class="line">    i=<span class="number">-1</span>;</span><br><span class="line">   <span class="keyword">if</span>(k==<span class="number">99</span>)</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> m=<span class="number">0</span>;m&lt;<span class="number">100</span>;m++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[m]==<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,m+<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（感觉不是特别难，但我就是弄了很久）</p><h1 id="指针困惑"><a href="#指针困惑" class="headerlink" title="指针困惑"></a>指针困惑</h1><p><img src="/.io//answer.assets/-bdcd8f8e098f9b1%5B10%5D.png" alt="-bdcd8f8e098f9b1[10]"></p><p>困惑一：(int (*)[3])a其实就是将a这个4×3的二维数组转成了3×4的，名字变成了b</p><p>困惑二：为什么只有三列却出现了[3]呢？其实a[1]+1表示a[1] [1],那么这个三是可以参与计算的，化简得(b[2]-2)[3]&#x3D;b[2]-2+3&#x3D;b[2] [1],最后再加加得到10</p>]]></content>
      
      
      
        <tags>
            
            <tag> answer </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
